<?php
/**
 * FeaturedOfferExpectedPriceResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, see the [Product Pricing v2022-05-01 Use Case Guide](doc:product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * FeaturedOfferExpectedPriceResult Class Doc Comment
 *
 * @category Class
 * @description The featured offer expected price result data for the requested offer.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeaturedOfferExpectedPriceResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeaturedOfferExpectedPriceResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'featured_offer_expected_price' => '\SellingPartnerApi\Model\FeaturedOfferExpectedPrice',
        'result_status' => 'string',
        'competing_featured_offer' => '\SellingPartnerApi\Model\FeaturedOffer',
        'current_featured_offer' => '\SellingPartnerApi\Model\FeaturedOffer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'featured_offer_expected_price' => null,
        'result_status' => null,
        'competing_featured_offer' => null,
        'current_featured_offer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'featured_offer_expected_price' => 'featuredOfferExpectedPrice',
        'result_status' => 'resultStatus',
        'competing_featured_offer' => 'competingFeaturedOffer',
        'current_featured_offer' => 'currentFeaturedOffer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'featured_offer_expected_price' => 'setFeaturedOfferExpectedPrice',
        'result_status' => 'setResultStatus',
        'competing_featured_offer' => 'setCompetingFeaturedOffer',
        'current_featured_offer' => 'setCurrentFeaturedOffer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'featured_offer_expected_price' => 'getFeaturedOfferExpectedPrice',
        'result_status' => 'getResultStatus',
        'competing_featured_offer' => 'getCompetingFeaturedOffer',
        'current_featured_offer' => 'getCurrentFeaturedOffer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['featured_offer_expected_price'] = isset($data['featured_offer_expected_price']) ? $data['featured_offer_expected_price'] : null;
        $this->container['result_status'] = isset($data['result_status']) ? $data['result_status'] : null;
        $this->container['competing_featured_offer'] = isset($data['competing_featured_offer']) ? $data['competing_featured_offer'] : null;
        $this->container['current_featured_offer'] = isset($data['current_featured_offer']) ? $data['current_featured_offer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result_status'] === null) {
            $invalidProperties[] = "'result_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets featured_offer_expected_price
     *
     * @return \SellingPartnerApi\Model\FeaturedOfferExpectedPrice
     */
    public function getFeaturedOfferExpectedPrice()
    {
        return $this->container['featured_offer_expected_price'];
    }

    /**
     * Sets featured_offer_expected_price
     *
     * @param \SellingPartnerApi\Model\FeaturedOfferExpectedPrice $featured_offer_expected_price featured_offer_expected_price
     *
     * @return $this
     */
    public function setFeaturedOfferExpectedPrice($featured_offer_expected_price)
    {
        $this->container['featured_offer_expected_price'] = $featured_offer_expected_price;

        return $this;
    }

    /**
     * Gets result_status
     *
     * @return string
     */
    public function getResultStatus()
    {
        return $this->container['result_status'];
    }

    /**
     * Sets result_status
     *
     * @param string $result_status The status of the featured offer expected price computation. Possible values include VALID_FOEP, NO_COMPETING_OFFER, OFFER_NOT_ELIGIBLE, OFFER_NOT_FOUND.
     *
     * @return $this
     */
    public function setResultStatus($result_status)
    {
        $this->container['result_status'] = $result_status;

        return $this;
    }

    /**
     * Gets competing_featured_offer
     *
     * @return \SellingPartnerApi\Model\FeaturedOffer
     */
    public function getCompetingFeaturedOffer()
    {
        return $this->container['competing_featured_offer'];
    }

    /**
     * Sets competing_featured_offer
     *
     * @param \SellingPartnerApi\Model\FeaturedOffer $competing_featured_offer The offer that will likely be the featured offer if the target offer is priced above its featured offer expected price. If the target offer is currently the featured offer, this property will be different than currentFeaturedOffer.
     *
     * @return $this
     */
    public function setCompetingFeaturedOffer($competing_featured_offer)
    {
        $this->container['competing_featured_offer'] = $competing_featured_offer;

        return $this;
    }

    /**
     * Gets current_featured_offer
     *
     * @return \SellingPartnerApi\Model\FeaturedOffer
     */
    public function getCurrentFeaturedOffer()
    {
        return $this->container['current_featured_offer'];
    }

    /**
     * Sets current_featured_offer
     *
     * @param \SellingPartnerApi\Model\FeaturedOffer $current_featured_offer The offer that is currently the featured offer. If the target offer is not currently featured, this property will be equal to competingFeaturedOffer.
     *
     * @return $this
     */
    public function setCurrentFeaturedOffer($current_featured_offer)
    {
        $this->container['current_featured_offer'] = $current_featured_offer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


