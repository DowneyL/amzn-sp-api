<?php
/**
 * FailedAdhocDisbursementEventList
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * FailedAdhocDisbursementEventList Class Doc Comment
 *
 * @category Class
 * @description Failed ad hoc disbursement event list.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FailedAdhocDisbursementEventList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FailedAdhocDisbursementEventList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'funds_transfers_type' => 'string',
        'transfer_id' => 'string',
        'disbursement_id' => 'string',
        'payment_disbursement_type' => 'string',
        'status' => 'string',
        'transfer_amount' => '\SellingPartnerApi\Model\Currency',
        'posted_date' => '\SellingPartnerApi\Model\\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'funds_transfers_type' => null,
        'transfer_id' => null,
        'disbursement_id' => null,
        'payment_disbursement_type' => null,
        'status' => null,
        'transfer_amount' => null,
        'posted_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'funds_transfers_type' => 'FundsTransfersType',
        'transfer_id' => 'TransferId',
        'disbursement_id' => 'DisbursementId',
        'payment_disbursement_type' => 'PaymentDisbursementType',
        'status' => 'Status',
        'transfer_amount' => 'TransferAmount',
        'posted_date' => 'PostedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'funds_transfers_type' => 'setFundsTransfersType',
        'transfer_id' => 'setTransferId',
        'disbursement_id' => 'setDisbursementId',
        'payment_disbursement_type' => 'setPaymentDisbursementType',
        'status' => 'setStatus',
        'transfer_amount' => 'setTransferAmount',
        'posted_date' => 'setPostedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'funds_transfers_type' => 'getFundsTransfersType',
        'transfer_id' => 'getTransferId',
        'disbursement_id' => 'getDisbursementId',
        'payment_disbursement_type' => 'getPaymentDisbursementType',
        'status' => 'getStatus',
        'transfer_amount' => 'getTransferAmount',
        'posted_date' => 'getPostedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['funds_transfers_type'] = isset($data['funds_transfers_type']) ? $data['funds_transfers_type'] : null;
        $this->container['transfer_id'] = isset($data['transfer_id']) ? $data['transfer_id'] : null;
        $this->container['disbursement_id'] = isset($data['disbursement_id']) ? $data['disbursement_id'] : null;
        $this->container['payment_disbursement_type'] = isset($data['payment_disbursement_type']) ? $data['payment_disbursement_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transfer_amount'] = isset($data['transfer_amount']) ? $data['transfer_amount'] : null;
        $this->container['posted_date'] = isset($data['posted_date']) ? $data['posted_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets funds_transfers_type
     *
     * @return string
     */
    public function getFundsTransfersType()
    {
        return $this->container['funds_transfers_type'];
    }

    /**
     * Sets funds_transfers_type
     *
     * @param string $funds_transfers_type The type of fund transfer.   Example \"Refund\"
     *
     * @return $this
     */
    public function setFundsTransfersType($funds_transfers_type)
    {
        $this->container['funds_transfers_type'] = $funds_transfers_type;

        return $this;
    }

    /**
     * Gets transfer_id
     *
     * @return string
     */
    public function getTransferId()
    {
        return $this->container['transfer_id'];
    }

    /**
     * Sets transfer_id
     *
     * @param string $transfer_id The transfer identifier.
     *
     * @return $this
     */
    public function setTransferId($transfer_id)
    {
        $this->container['transfer_id'] = $transfer_id;

        return $this;
    }

    /**
     * Gets disbursement_id
     *
     * @return string
     */
    public function getDisbursementId()
    {
        return $this->container['disbursement_id'];
    }

    /**
     * Sets disbursement_id
     *
     * @param string $disbursement_id The disbursement identifier.
     *
     * @return $this
     */
    public function setDisbursementId($disbursement_id)
    {
        $this->container['disbursement_id'] = $disbursement_id;

        return $this;
    }

    /**
     * Gets payment_disbursement_type
     *
     * @return string
     */
    public function getPaymentDisbursementType()
    {
        return $this->container['payment_disbursement_type'];
    }

    /**
     * Sets payment_disbursement_type
     *
     * @param string $payment_disbursement_type The type of payment for disbursement.   Example `CREDIT_CARD`
     *
     * @return $this
     */
    public function setPaymentDisbursementType($payment_disbursement_type)
    {
        $this->container['payment_disbursement_type'] = $payment_disbursement_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the failed `AdhocDisbursement`.   Example `HARD_DECLINED`
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transfer_amount
     *
     * @return \SellingPartnerApi\Model\Currency
     */
    public function getTransferAmount()
    {
        return $this->container['transfer_amount'];
    }

    /**
     * Sets transfer_amount
     *
     * @param \SellingPartnerApi\Model\Currency $transfer_amount The amount of the Adhoc Disbursement.
     *
     * @return $this
     */
    public function setTransferAmount($transfer_amount)
    {
        $this->container['transfer_amount'] = $transfer_amount;

        return $this;
    }

    /**
     * Gets posted_date
     *
     * @return \SellingPartnerApi\Model\\DateTime
     */
    public function getPostedDate()
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date
     *
     * @param \SellingPartnerApi\Model\\DateTime $posted_date The date and time when the financial event was posted.
     *
     * @return $this
     */
    public function setPostedDate($posted_date)
    {
        $this->container['posted_date'] = $posted_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


