<?php
/**
 * TrackingEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\FulfillmentOutbound20200701;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * TrackingEvent Class Doc Comment
 *
 * @category Class
 * @description Information for tracking package deliveries.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrackingEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrackingEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eventDate' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp',
'eventAddress' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingAddress',
'eventCode' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\EventCode',
'eventDescription' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eventDate' => null,
'eventAddress' => null,
'eventCode' => null,
'eventDescription' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eventDate' => 'eventDate',
'eventAddress' => 'eventAddress',
'eventCode' => 'eventCode',
'eventDescription' => 'eventDescription'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eventDate' => 'setEventDate',
'eventAddress' => 'setEventAddress',
'eventCode' => 'setEventCode',
'eventDescription' => 'setEventDescription'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eventDate' => 'getEventDate',
'eventAddress' => 'getEventAddress',
'eventCode' => 'getEventCode',
'eventDescription' => 'getEventDescription'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eventDate'] = isset($data['eventDate']) ? $data['eventDate'] : null;
        $this->container['eventAddress'] = isset($data['eventAddress']) ? $data['eventAddress'] : null;
        $this->container['eventCode'] = isset($data['eventCode']) ? $data['eventCode'] : null;
        $this->container['eventDescription'] = isset($data['eventDescription']) ? $data['eventDescription'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eventDate'] === null) {
            $invalidProperties[] = "'eventDate' can't be null";
        }
        if ($this->container['eventAddress'] === null) {
            $invalidProperties[] = "'eventAddress' can't be null";
        }
        if ($this->container['eventCode'] === null) {
            $invalidProperties[] = "'eventCode' can't be null";
        }
        if ($this->container['eventDescription'] === null) {
            $invalidProperties[] = "'eventDescription' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eventDate
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp
     */
    public function getEventDate()
    {
        return $this->container['eventDate'];
    }

    /**
     * Sets eventDate
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp $eventDate eventDate
     *
     * @return $this
     */
    public function setEventDate($eventDate)
    {
        $this->container['eventDate'] = $eventDate;

        return $this;
    }

    /**
     * Gets eventAddress
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingAddress
     */
    public function getEventAddress()
    {
        return $this->container['eventAddress'];
    }

    /**
     * Sets eventAddress
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingAddress $eventAddress eventAddress
     *
     * @return $this
     */
    public function setEventAddress($eventAddress)
    {
        $this->container['eventAddress'] = $eventAddress;

        return $this;
    }

    /**
     * Gets eventCode
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\EventCode
     */
    public function getEventCode()
    {
        return $this->container['eventCode'];
    }

    /**
     * Sets eventCode
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\EventCode $eventCode eventCode
     *
     * @return $this
     */
    public function setEventCode($eventCode)
    {
        $this->container['eventCode'] = $eventCode;

        return $this;
    }

    /**
     * Gets eventDescription
     *
     * @return string
     */
    public function getEventDescription()
    {
        return $this->container['eventDescription'];
    }

    /**
     * Sets eventDescription
     *
     * @param string $eventDescription A description for the corresponding event code.
     *
     * @return $this
     */
    public function setEventDescription($eventDescription)
    {
        $this->container['eventDescription'] = $eventDescription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
