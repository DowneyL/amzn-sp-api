<?php
/**
 * ReturnAuthorization
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\FulfillmentOutbound20200701;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ReturnAuthorization Class Doc Comment
 *
 * @category Class
 * @description Return authorization information for items accepted for return.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnAuthorization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReturnAuthorization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnAuthorizationId' => 'string',
'fulfillmentCenterId' => 'string',
'returnToAddress' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\Address',
'amazonRmaId' => 'string',
'rmaPageURL' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnAuthorizationId' => null,
'fulfillmentCenterId' => null,
'returnToAddress' => null,
'amazonRmaId' => null,
'rmaPageURL' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnAuthorizationId' => 'returnAuthorizationId',
'fulfillmentCenterId' => 'fulfillmentCenterId',
'returnToAddress' => 'returnToAddress',
'amazonRmaId' => 'amazonRmaId',
'rmaPageURL' => 'rmaPageURL'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnAuthorizationId' => 'setReturnAuthorizationId',
'fulfillmentCenterId' => 'setFulfillmentCenterId',
'returnToAddress' => 'setReturnToAddress',
'amazonRmaId' => 'setAmazonRmaId',
'rmaPageURL' => 'setRmaPageURL'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnAuthorizationId' => 'getReturnAuthorizationId',
'fulfillmentCenterId' => 'getFulfillmentCenterId',
'returnToAddress' => 'getReturnToAddress',
'amazonRmaId' => 'getAmazonRmaId',
'rmaPageURL' => 'getRmaPageURL'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnAuthorizationId'] = isset($data['returnAuthorizationId']) ? $data['returnAuthorizationId'] : null;
        $this->container['fulfillmentCenterId'] = isset($data['fulfillmentCenterId']) ? $data['fulfillmentCenterId'] : null;
        $this->container['returnToAddress'] = isset($data['returnToAddress']) ? $data['returnToAddress'] : null;
        $this->container['amazonRmaId'] = isset($data['amazonRmaId']) ? $data['amazonRmaId'] : null;
        $this->container['rmaPageURL'] = isset($data['rmaPageURL']) ? $data['rmaPageURL'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['returnAuthorizationId'] === null) {
            $invalidProperties[] = "'returnAuthorizationId' can't be null";
        }
        if ($this->container['fulfillmentCenterId'] === null) {
            $invalidProperties[] = "'fulfillmentCenterId' can't be null";
        }
        if ($this->container['returnToAddress'] === null) {
            $invalidProperties[] = "'returnToAddress' can't be null";
        }
        if ($this->container['amazonRmaId'] === null) {
            $invalidProperties[] = "'amazonRmaId' can't be null";
        }
        if ($this->container['rmaPageURL'] === null) {
            $invalidProperties[] = "'rmaPageURL' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnAuthorizationId
     *
     * @return string
     */
    public function getReturnAuthorizationId()
    {
        return $this->container['returnAuthorizationId'];
    }

    /**
     * Sets returnAuthorizationId
     *
     * @param string $returnAuthorizationId An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
     *
     * @return $this
     */
    public function setReturnAuthorizationId($returnAuthorizationId)
    {
        $this->container['returnAuthorizationId'] = $returnAuthorizationId;

        return $this;
    }

    /**
     * Gets fulfillmentCenterId
     *
     * @return string
     */
    public function getFulfillmentCenterId()
    {
        return $this->container['fulfillmentCenterId'];
    }

    /**
     * Sets fulfillmentCenterId
     *
     * @param string $fulfillmentCenterId An identifier for the Amazon fulfillment center that the return items should be sent to.
     *
     * @return $this
     */
    public function setFulfillmentCenterId($fulfillmentCenterId)
    {
        $this->container['fulfillmentCenterId'] = $fulfillmentCenterId;

        return $this;
    }

    /**
     * Gets returnToAddress
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\Address
     */
    public function getReturnToAddress()
    {
        return $this->container['returnToAddress'];
    }

    /**
     * Sets returnToAddress
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\Address $returnToAddress returnToAddress
     *
     * @return $this
     */
    public function setReturnToAddress($returnToAddress)
    {
        $this->container['returnToAddress'] = $returnToAddress;

        return $this;
    }

    /**
     * Gets amazonRmaId
     *
     * @return string
     */
    public function getAmazonRmaId()
    {
        return $this->container['amazonRmaId'];
    }

    /**
     * Sets amazonRmaId
     *
     * @param string $amazonRmaId The return merchandise authorization (RMA) that Amazon needs to process the return.
     *
     * @return $this
     */
    public function setAmazonRmaId($amazonRmaId)
    {
        $this->container['amazonRmaId'] = $amazonRmaId;

        return $this;
    }

    /**
     * Gets rmaPageURL
     *
     * @return string
     */
    public function getRmaPageURL()
    {
        return $this->container['rmaPageURL'];
    }

    /**
     * Sets rmaPageURL
     *
     * @param string $rmaPageURL A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
     *
     * @return $this
     */
    public function setRmaPageURL($rmaPageURL)
    {
        $this->container['rmaPageURL'] = $rmaPageURL;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
