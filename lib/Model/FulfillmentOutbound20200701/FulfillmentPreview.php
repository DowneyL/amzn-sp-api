<?php
/**
 * FulfillmentPreview
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\FulfillmentOutbound20200701;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * FulfillmentPreview Class Doc Comment
 *
 * @category Class
 * @description Information about a fulfillment order preview, including delivery and fee information based on shipping method.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FulfillmentPreview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FulfillmentPreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shippingSpeedCategory' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\ShippingSpeedCategory',
'scheduledDeliveryInfo' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\ScheduledDeliveryInfo',
'isFulfillable' => 'bool',
'isCODCapable' => 'bool',
'estimatedShippingWeight' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\Weight',
'estimatedFees' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\FeeList',
'fulfillmentPreviewShipments' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\FulfillmentPreviewShipmentList',
'unfulfillablePreviewItems' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\UnfulfillablePreviewItemList',
'orderUnfulfillableReasons' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\StringList',
'marketplaceId' => 'string',
'featureConstraints' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\FeatureSettings[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shippingSpeedCategory' => null,
'scheduledDeliveryInfo' => null,
'isFulfillable' => null,
'isCODCapable' => null,
'estimatedShippingWeight' => null,
'estimatedFees' => null,
'fulfillmentPreviewShipments' => null,
'unfulfillablePreviewItems' => null,
'orderUnfulfillableReasons' => null,
'marketplaceId' => null,
'featureConstraints' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shippingSpeedCategory' => 'shippingSpeedCategory',
'scheduledDeliveryInfo' => 'scheduledDeliveryInfo',
'isFulfillable' => 'isFulfillable',
'isCODCapable' => 'isCODCapable',
'estimatedShippingWeight' => 'estimatedShippingWeight',
'estimatedFees' => 'estimatedFees',
'fulfillmentPreviewShipments' => 'fulfillmentPreviewShipments',
'unfulfillablePreviewItems' => 'unfulfillablePreviewItems',
'orderUnfulfillableReasons' => 'orderUnfulfillableReasons',
'marketplaceId' => 'marketplaceId',
'featureConstraints' => 'featureConstraints'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shippingSpeedCategory' => 'setShippingSpeedCategory',
'scheduledDeliveryInfo' => 'setScheduledDeliveryInfo',
'isFulfillable' => 'setIsFulfillable',
'isCODCapable' => 'setIsCODCapable',
'estimatedShippingWeight' => 'setEstimatedShippingWeight',
'estimatedFees' => 'setEstimatedFees',
'fulfillmentPreviewShipments' => 'setFulfillmentPreviewShipments',
'unfulfillablePreviewItems' => 'setUnfulfillablePreviewItems',
'orderUnfulfillableReasons' => 'setOrderUnfulfillableReasons',
'marketplaceId' => 'setMarketplaceId',
'featureConstraints' => 'setFeatureConstraints'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shippingSpeedCategory' => 'getShippingSpeedCategory',
'scheduledDeliveryInfo' => 'getScheduledDeliveryInfo',
'isFulfillable' => 'getIsFulfillable',
'isCODCapable' => 'getIsCODCapable',
'estimatedShippingWeight' => 'getEstimatedShippingWeight',
'estimatedFees' => 'getEstimatedFees',
'fulfillmentPreviewShipments' => 'getFulfillmentPreviewShipments',
'unfulfillablePreviewItems' => 'getUnfulfillablePreviewItems',
'orderUnfulfillableReasons' => 'getOrderUnfulfillableReasons',
'marketplaceId' => 'getMarketplaceId',
'featureConstraints' => 'getFeatureConstraints'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shippingSpeedCategory'] = isset($data['shippingSpeedCategory']) ? $data['shippingSpeedCategory'] : null;
        $this->container['scheduledDeliveryInfo'] = isset($data['scheduledDeliveryInfo']) ? $data['scheduledDeliveryInfo'] : null;
        $this->container['isFulfillable'] = isset($data['isFulfillable']) ? $data['isFulfillable'] : null;
        $this->container['isCODCapable'] = isset($data['isCODCapable']) ? $data['isCODCapable'] : null;
        $this->container['estimatedShippingWeight'] = isset($data['estimatedShippingWeight']) ? $data['estimatedShippingWeight'] : null;
        $this->container['estimatedFees'] = isset($data['estimatedFees']) ? $data['estimatedFees'] : null;
        $this->container['fulfillmentPreviewShipments'] = isset($data['fulfillmentPreviewShipments']) ? $data['fulfillmentPreviewShipments'] : null;
        $this->container['unfulfillablePreviewItems'] = isset($data['unfulfillablePreviewItems']) ? $data['unfulfillablePreviewItems'] : null;
        $this->container['orderUnfulfillableReasons'] = isset($data['orderUnfulfillableReasons']) ? $data['orderUnfulfillableReasons'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['featureConstraints'] = isset($data['featureConstraints']) ? $data['featureConstraints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shippingSpeedCategory'] === null) {
            $invalidProperties[] = "'shippingSpeedCategory' can't be null";
        }
        if ($this->container['isFulfillable'] === null) {
            $invalidProperties[] = "'isFulfillable' can't be null";
        }
        if ($this->container['isCODCapable'] === null) {
            $invalidProperties[] = "'isCODCapable' can't be null";
        }
        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shippingSpeedCategory
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\ShippingSpeedCategory
     */
    public function getShippingSpeedCategory()
    {
        return $this->container['shippingSpeedCategory'];
    }

    /**
     * Sets shippingSpeedCategory
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\ShippingSpeedCategory $shippingSpeedCategory shippingSpeedCategory
     *
     * @return $this
     */
    public function setShippingSpeedCategory($shippingSpeedCategory)
    {
        $this->container['shippingSpeedCategory'] = $shippingSpeedCategory;

        return $this;
    }

    /**
     * Gets scheduledDeliveryInfo
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\ScheduledDeliveryInfo
     */
    public function getScheduledDeliveryInfo()
    {
        return $this->container['scheduledDeliveryInfo'];
    }

    /**
     * Sets scheduledDeliveryInfo
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\ScheduledDeliveryInfo $scheduledDeliveryInfo scheduledDeliveryInfo
     *
     * @return $this
     */
    public function setScheduledDeliveryInfo($scheduledDeliveryInfo)
    {
        $this->container['scheduledDeliveryInfo'] = $scheduledDeliveryInfo;

        return $this;
    }

    /**
     * Gets isFulfillable
     *
     * @return bool
     */
    public function getIsFulfillable()
    {
        return $this->container['isFulfillable'];
    }

    /**
     * Sets isFulfillable
     *
     * @param bool $isFulfillable When true, this fulfillment order preview is fulfillable.
     *
     * @return $this
     */
    public function setIsFulfillable($isFulfillable)
    {
        $this->container['isFulfillable'] = $isFulfillable;

        return $this;
    }

    /**
     * Gets isCODCapable
     *
     * @return bool
     */
    public function getIsCODCapable()
    {
        return $this->container['isCODCapable'];
    }

    /**
     * Sets isCODCapable
     *
     * @param bool $isCODCapable When true, this fulfillment order preview is for COD (Cash On Delivery).
     *
     * @return $this
     */
    public function setIsCODCapable($isCODCapable)
    {
        $this->container['isCODCapable'] = $isCODCapable;

        return $this;
    }

    /**
     * Gets estimatedShippingWeight
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\Weight
     */
    public function getEstimatedShippingWeight()
    {
        return $this->container['estimatedShippingWeight'];
    }

    /**
     * Sets estimatedShippingWeight
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\Weight $estimatedShippingWeight estimatedShippingWeight
     *
     * @return $this
     */
    public function setEstimatedShippingWeight($estimatedShippingWeight)
    {
        $this->container['estimatedShippingWeight'] = $estimatedShippingWeight;

        return $this;
    }

    /**
     * Gets estimatedFees
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\FeeList
     */
    public function getEstimatedFees()
    {
        return $this->container['estimatedFees'];
    }

    /**
     * Sets estimatedFees
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\FeeList $estimatedFees estimatedFees
     *
     * @return $this
     */
    public function setEstimatedFees($estimatedFees)
    {
        $this->container['estimatedFees'] = $estimatedFees;

        return $this;
    }

    /**
     * Gets fulfillmentPreviewShipments
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\FulfillmentPreviewShipmentList
     */
    public function getFulfillmentPreviewShipments()
    {
        return $this->container['fulfillmentPreviewShipments'];
    }

    /**
     * Sets fulfillmentPreviewShipments
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\FulfillmentPreviewShipmentList $fulfillmentPreviewShipments fulfillmentPreviewShipments
     *
     * @return $this
     */
    public function setFulfillmentPreviewShipments($fulfillmentPreviewShipments)
    {
        $this->container['fulfillmentPreviewShipments'] = $fulfillmentPreviewShipments;

        return $this;
    }

    /**
     * Gets unfulfillablePreviewItems
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\UnfulfillablePreviewItemList
     */
    public function getUnfulfillablePreviewItems()
    {
        return $this->container['unfulfillablePreviewItems'];
    }

    /**
     * Sets unfulfillablePreviewItems
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\UnfulfillablePreviewItemList $unfulfillablePreviewItems unfulfillablePreviewItems
     *
     * @return $this
     */
    public function setUnfulfillablePreviewItems($unfulfillablePreviewItems)
    {
        $this->container['unfulfillablePreviewItems'] = $unfulfillablePreviewItems;

        return $this;
    }

    /**
     * Gets orderUnfulfillableReasons
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\StringList
     */
    public function getOrderUnfulfillableReasons()
    {
        return $this->container['orderUnfulfillableReasons'];
    }

    /**
     * Sets orderUnfulfillableReasons
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\StringList $orderUnfulfillableReasons orderUnfulfillableReasons
     *
     * @return $this
     */
    public function setOrderUnfulfillableReasons($orderUnfulfillableReasons)
    {
        $this->container['orderUnfulfillableReasons'] = $orderUnfulfillableReasons;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string $marketplaceId The marketplace the fulfillment order is placed against.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets featureConstraints
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\FeatureSettings[]
     */
    public function getFeatureConstraints()
    {
        return $this->container['featureConstraints'];
    }

    /**
     * Sets featureConstraints
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\FeatureSettings[] $featureConstraints A list of features and their fulfillment policies to apply to the order.
     *
     * @return $this
     */
    public function setFeatureConstraints($featureConstraints)
    {
        $this->container['featureConstraints'] = $featureConstraints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
