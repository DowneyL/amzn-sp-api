<?php
/**
 * PackageTrackingDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\FulfillmentOutbound20200701;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * PackageTrackingDetails Class Doc Comment
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageTrackingDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackageTrackingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'packageNumber' => 'int',
'trackingNumber' => 'string',
'customerTrackingLink' => 'string',
'carrierCode' => 'string',
'carrierPhoneNumber' => 'string',
'carrierURL' => 'string',
'shipDate' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp',
'estimatedArrivalDate' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp',
'shipToAddress' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingAddress',
'currentStatus' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\CurrentStatus',
'currentStatusDescription' => 'string',
'signedForBy' => 'string',
'additionalLocationInfo' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\AdditionalLocationInfo',
'trackingEvents' => '\SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingEventList'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'packageNumber' => 'int32',
'trackingNumber' => null,
'customerTrackingLink' => null,
'carrierCode' => null,
'carrierPhoneNumber' => null,
'carrierURL' => null,
'shipDate' => null,
'estimatedArrivalDate' => null,
'shipToAddress' => null,
'currentStatus' => null,
'currentStatusDescription' => null,
'signedForBy' => null,
'additionalLocationInfo' => null,
'trackingEvents' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'packageNumber' => 'packageNumber',
'trackingNumber' => 'trackingNumber',
'customerTrackingLink' => 'customerTrackingLink',
'carrierCode' => 'carrierCode',
'carrierPhoneNumber' => 'carrierPhoneNumber',
'carrierURL' => 'carrierURL',
'shipDate' => 'shipDate',
'estimatedArrivalDate' => 'estimatedArrivalDate',
'shipToAddress' => 'shipToAddress',
'currentStatus' => 'currentStatus',
'currentStatusDescription' => 'currentStatusDescription',
'signedForBy' => 'signedForBy',
'additionalLocationInfo' => 'additionalLocationInfo',
'trackingEvents' => 'trackingEvents'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'packageNumber' => 'setPackageNumber',
'trackingNumber' => 'setTrackingNumber',
'customerTrackingLink' => 'setCustomerTrackingLink',
'carrierCode' => 'setCarrierCode',
'carrierPhoneNumber' => 'setCarrierPhoneNumber',
'carrierURL' => 'setCarrierURL',
'shipDate' => 'setShipDate',
'estimatedArrivalDate' => 'setEstimatedArrivalDate',
'shipToAddress' => 'setShipToAddress',
'currentStatus' => 'setCurrentStatus',
'currentStatusDescription' => 'setCurrentStatusDescription',
'signedForBy' => 'setSignedForBy',
'additionalLocationInfo' => 'setAdditionalLocationInfo',
'trackingEvents' => 'setTrackingEvents'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'packageNumber' => 'getPackageNumber',
'trackingNumber' => 'getTrackingNumber',
'customerTrackingLink' => 'getCustomerTrackingLink',
'carrierCode' => 'getCarrierCode',
'carrierPhoneNumber' => 'getCarrierPhoneNumber',
'carrierURL' => 'getCarrierURL',
'shipDate' => 'getShipDate',
'estimatedArrivalDate' => 'getEstimatedArrivalDate',
'shipToAddress' => 'getShipToAddress',
'currentStatus' => 'getCurrentStatus',
'currentStatusDescription' => 'getCurrentStatusDescription',
'signedForBy' => 'getSignedForBy',
'additionalLocationInfo' => 'getAdditionalLocationInfo',
'trackingEvents' => 'getTrackingEvents'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['packageNumber'] = isset($data['packageNumber']) ? $data['packageNumber'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['customerTrackingLink'] = isset($data['customerTrackingLink']) ? $data['customerTrackingLink'] : null;
        $this->container['carrierCode'] = isset($data['carrierCode']) ? $data['carrierCode'] : null;
        $this->container['carrierPhoneNumber'] = isset($data['carrierPhoneNumber']) ? $data['carrierPhoneNumber'] : null;
        $this->container['carrierURL'] = isset($data['carrierURL']) ? $data['carrierURL'] : null;
        $this->container['shipDate'] = isset($data['shipDate']) ? $data['shipDate'] : null;
        $this->container['estimatedArrivalDate'] = isset($data['estimatedArrivalDate']) ? $data['estimatedArrivalDate'] : null;
        $this->container['shipToAddress'] = isset($data['shipToAddress']) ? $data['shipToAddress'] : null;
        $this->container['currentStatus'] = isset($data['currentStatus']) ? $data['currentStatus'] : null;
        $this->container['currentStatusDescription'] = isset($data['currentStatusDescription']) ? $data['currentStatusDescription'] : null;
        $this->container['signedForBy'] = isset($data['signedForBy']) ? $data['signedForBy'] : null;
        $this->container['additionalLocationInfo'] = isset($data['additionalLocationInfo']) ? $data['additionalLocationInfo'] : null;
        $this->container['trackingEvents'] = isset($data['trackingEvents']) ? $data['trackingEvents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['packageNumber'] === null) {
            $invalidProperties[] = "'packageNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets packageNumber
     *
     * @return int
     */
    public function getPackageNumber()
    {
        return $this->container['packageNumber'];
    }

    /**
     * Sets packageNumber
     *
     * @param int $packageNumber The package identifier.
     *
     * @return $this
     */
    public function setPackageNumber($packageNumber)
    {
        $this->container['packageNumber'] = $packageNumber;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber The tracking number for the package.
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets customerTrackingLink
     *
     * @return string
     */
    public function getCustomerTrackingLink()
    {
        return $this->container['customerTrackingLink'];
    }

    /**
     * Sets customerTrackingLink
     *
     * @param string $customerTrackingLink Link on swiship.com that allows customers to track the package.
     *
     * @return $this
     */
    public function setCustomerTrackingLink($customerTrackingLink)
    {
        $this->container['customerTrackingLink'] = $customerTrackingLink;

        return $this;
    }

    /**
     * Gets carrierCode
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrierCode'];
    }

    /**
     * Sets carrierCode
     *
     * @param string $carrierCode The name of the carrier.
     *
     * @return $this
     */
    public function setCarrierCode($carrierCode)
    {
        $this->container['carrierCode'] = $carrierCode;

        return $this;
    }

    /**
     * Gets carrierPhoneNumber
     *
     * @return string
     */
    public function getCarrierPhoneNumber()
    {
        return $this->container['carrierPhoneNumber'];
    }

    /**
     * Sets carrierPhoneNumber
     *
     * @param string $carrierPhoneNumber The phone number of the carrier.
     *
     * @return $this
     */
    public function setCarrierPhoneNumber($carrierPhoneNumber)
    {
        $this->container['carrierPhoneNumber'] = $carrierPhoneNumber;

        return $this;
    }

    /**
     * Gets carrierURL
     *
     * @return string
     */
    public function getCarrierURL()
    {
        return $this->container['carrierURL'];
    }

    /**
     * Sets carrierURL
     *
     * @param string $carrierURL The URL of the carrier's website.
     *
     * @return $this
     */
    public function setCarrierURL($carrierURL)
    {
        $this->container['carrierURL'] = $carrierURL;

        return $this;
    }

    /**
     * Gets shipDate
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp
     */
    public function getShipDate()
    {
        return $this->container['shipDate'];
    }

    /**
     * Sets shipDate
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp $shipDate shipDate
     *
     * @return $this
     */
    public function setShipDate($shipDate)
    {
        $this->container['shipDate'] = $shipDate;

        return $this;
    }

    /**
     * Gets estimatedArrivalDate
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp
     */
    public function getEstimatedArrivalDate()
    {
        return $this->container['estimatedArrivalDate'];
    }

    /**
     * Sets estimatedArrivalDate
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\Timestamp $estimatedArrivalDate estimatedArrivalDate
     *
     * @return $this
     */
    public function setEstimatedArrivalDate($estimatedArrivalDate)
    {
        $this->container['estimatedArrivalDate'] = $estimatedArrivalDate;

        return $this;
    }

    /**
     * Gets shipToAddress
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingAddress
     */
    public function getShipToAddress()
    {
        return $this->container['shipToAddress'];
    }

    /**
     * Sets shipToAddress
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingAddress $shipToAddress shipToAddress
     *
     * @return $this
     */
    public function setShipToAddress($shipToAddress)
    {
        $this->container['shipToAddress'] = $shipToAddress;

        return $this;
    }

    /**
     * Gets currentStatus
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\CurrentStatus
     */
    public function getCurrentStatus()
    {
        return $this->container['currentStatus'];
    }

    /**
     * Sets currentStatus
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\CurrentStatus $currentStatus currentStatus
     *
     * @return $this
     */
    public function setCurrentStatus($currentStatus)
    {
        $this->container['currentStatus'] = $currentStatus;

        return $this;
    }

    /**
     * Gets currentStatusDescription
     *
     * @return string
     */
    public function getCurrentStatusDescription()
    {
        return $this->container['currentStatusDescription'];
    }

    /**
     * Sets currentStatusDescription
     *
     * @param string $currentStatusDescription Description corresponding to the CurrentStatus value.
     *
     * @return $this
     */
    public function setCurrentStatusDescription($currentStatusDescription)
    {
        $this->container['currentStatusDescription'] = $currentStatusDescription;

        return $this;
    }

    /**
     * Gets signedForBy
     *
     * @return string
     */
    public function getSignedForBy()
    {
        return $this->container['signedForBy'];
    }

    /**
     * Sets signedForBy
     *
     * @param string $signedForBy The name of the person who signed for the package.
     *
     * @return $this
     */
    public function setSignedForBy($signedForBy)
    {
        $this->container['signedForBy'] = $signedForBy;

        return $this;
    }

    /**
     * Gets additionalLocationInfo
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\AdditionalLocationInfo
     */
    public function getAdditionalLocationInfo()
    {
        return $this->container['additionalLocationInfo'];
    }

    /**
     * Sets additionalLocationInfo
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\AdditionalLocationInfo $additionalLocationInfo additionalLocationInfo
     *
     * @return $this
     */
    public function setAdditionalLocationInfo($additionalLocationInfo)
    {
        $this->container['additionalLocationInfo'] = $additionalLocationInfo;

        return $this;
    }

    /**
     * Gets trackingEvents
     *
     * @return \SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingEventList
     */
    public function getTrackingEvents()
    {
        return $this->container['trackingEvents'];
    }

    /**
     * Sets trackingEvents
     *
     * @param \SellingPartnerApi\Model\FulfillmentOutbound20200701\TrackingEventList $trackingEvents trackingEvents
     *
     * @return $this
     */
    public function setTrackingEvents($trackingEvents)
    {
        $this->container['trackingEvents'] = $trackingEvents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
