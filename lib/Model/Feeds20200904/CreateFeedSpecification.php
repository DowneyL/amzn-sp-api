<?php
/**
 * CreateFeedSpecification
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Feeds
 *
 * Effective **June 27, 2023**, the Selling Partner API for Feeds v2020-09-04 will no longer be available and all calls to it will fail. Integrations that rely on the Feeds API must migrate to [Feeds v2021-06-30](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference) to avoid service disruption.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\Feeds20200904;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * CreateFeedSpecification Class Doc Comment
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateFeedSpecification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateFeedSpecification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feedType' => 'string',
'marketplaceIds' => 'string[]',
'inputFeedDocumentId' => 'string',
'feedOptions' => '\SellingPartnerApi\Model\Feeds20200904\FeedOptions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feedType' => null,
'marketplaceIds' => null,
'inputFeedDocumentId' => null,
'feedOptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feedType' => 'feedType',
'marketplaceIds' => 'marketplaceIds',
'inputFeedDocumentId' => 'inputFeedDocumentId',
'feedOptions' => 'feedOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feedType' => 'setFeedType',
'marketplaceIds' => 'setMarketplaceIds',
'inputFeedDocumentId' => 'setInputFeedDocumentId',
'feedOptions' => 'setFeedOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feedType' => 'getFeedType',
'marketplaceIds' => 'getMarketplaceIds',
'inputFeedDocumentId' => 'getInputFeedDocumentId',
'feedOptions' => 'getFeedOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feedType'] = isset($data['feedType']) ? $data['feedType'] : null;
        $this->container['marketplaceIds'] = isset($data['marketplaceIds']) ? $data['marketplaceIds'] : null;
        $this->container['inputFeedDocumentId'] = isset($data['inputFeedDocumentId']) ? $data['inputFeedDocumentId'] : null;
        $this->container['feedOptions'] = isset($data['feedOptions']) ? $data['feedOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['feedType'] === null) {
            $invalidProperties[] = "'feedType' can't be null";
        }
        if ($this->container['marketplaceIds'] === null) {
            $invalidProperties[] = "'marketplaceIds' can't be null";
        }
        if ($this->container['inputFeedDocumentId'] === null) {
            $invalidProperties[] = "'inputFeedDocumentId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feedType
     *
     * @return string
     */
    public function getFeedType()
    {
        return $this->container['feedType'];
    }

    /**
     * Sets feedType
     *
     * @param string $feedType The feed type.
     *
     * @return $this
     */
    public function setFeedType($feedType)
    {
        $this->container['feedType'] = $feedType;

        return $this;
    }

    /**
     * Gets marketplaceIds
     *
     * @return string[]
     */
    public function getMarketplaceIds()
    {
        return $this->container['marketplaceIds'];
    }

    /**
     * Sets marketplaceIds
     *
     * @param string[] $marketplaceIds A list of identifiers for marketplaces that you want the feed to be applied to.
     *
     * @return $this
     */
    public function setMarketplaceIds($marketplaceIds)
    {
        $this->container['marketplaceIds'] = $marketplaceIds;

        return $this;
    }

    /**
     * Gets inputFeedDocumentId
     *
     * @return string
     */
    public function getInputFeedDocumentId()
    {
        return $this->container['inputFeedDocumentId'];
    }

    /**
     * Sets inputFeedDocumentId
     *
     * @param string $inputFeedDocumentId The document identifier returned by the createFeedDocument operation. Encrypt and upload the feed document contents before calling the createFeed operation.
     *
     * @return $this
     */
    public function setInputFeedDocumentId($inputFeedDocumentId)
    {
        $this->container['inputFeedDocumentId'] = $inputFeedDocumentId;

        return $this;
    }

    /**
     * Gets feedOptions
     *
     * @return \SellingPartnerApi\Model\Feeds20200904\FeedOptions
     */
    public function getFeedOptions()
    {
        return $this->container['feedOptions'];
    }

    /**
     * Sets feedOptions
     *
     * @param \SellingPartnerApi\Model\Feeds20200904\FeedOptions $feedOptions feedOptions
     *
     * @return $this
     */
    public function setFeedOptions($feedOptions)
    {
        $this->container['feedOptions'] = $feedOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
