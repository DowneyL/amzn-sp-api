<?php
/**
 * PublishRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\AplusContent20201101;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * PublishRecord Class Doc Comment
 *
 * @category Class
 * @description The full context for an A+ Content publishing event.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublishRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublishRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplaceId' => '\SellingPartnerApi\Model\AplusContent20201101\MarketplaceId',
'locale' => '\SellingPartnerApi\Model\AplusContent20201101\LanguageTag',
'asin' => '\SellingPartnerApi\Model\AplusContent20201101\Asin',
'contentType' => '\SellingPartnerApi\Model\AplusContent20201101\ContentType',
'contentSubType' => '\SellingPartnerApi\Model\AplusContent20201101\ContentSubType',
'contentReferenceKey' => '\SellingPartnerApi\Model\AplusContent20201101\ContentReferenceKey'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplaceId' => null,
'locale' => null,
'asin' => null,
'contentType' => null,
'contentSubType' => null,
'contentReferenceKey' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplaceId' => 'marketplaceId',
'locale' => 'locale',
'asin' => 'asin',
'contentType' => 'contentType',
'contentSubType' => 'contentSubType',
'contentReferenceKey' => 'contentReferenceKey'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplaceId' => 'setMarketplaceId',
'locale' => 'setLocale',
'asin' => 'setAsin',
'contentType' => 'setContentType',
'contentSubType' => 'setContentSubType',
'contentReferenceKey' => 'setContentReferenceKey'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplaceId' => 'getMarketplaceId',
'locale' => 'getLocale',
'asin' => 'getAsin',
'contentType' => 'getContentType',
'contentSubType' => 'getContentSubType',
'contentReferenceKey' => 'getContentReferenceKey'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['contentType'] = isset($data['contentType']) ? $data['contentType'] : null;
        $this->container['contentSubType'] = isset($data['contentSubType']) ? $data['contentSubType'] : null;
        $this->container['contentReferenceKey'] = isset($data['contentReferenceKey']) ? $data['contentReferenceKey'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ($this->container['asin'] === null) {
            $invalidProperties[] = "'asin' can't be null";
        }
        if ($this->container['contentType'] === null) {
            $invalidProperties[] = "'contentType' can't be null";
        }
        if ($this->container['contentReferenceKey'] === null) {
            $invalidProperties[] = "'contentReferenceKey' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplaceId
     *
     * @return \SellingPartnerApi\Model\AplusContent20201101\MarketplaceId
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param \SellingPartnerApi\Model\AplusContent20201101\MarketplaceId $marketplaceId marketplaceId
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \SellingPartnerApi\Model\AplusContent20201101\LanguageTag
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \SellingPartnerApi\Model\AplusContent20201101\LanguageTag $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return \SellingPartnerApi\Model\AplusContent20201101\Asin
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param \SellingPartnerApi\Model\AplusContent20201101\Asin $asin asin
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets contentType
     *
     * @return \SellingPartnerApi\Model\AplusContent20201101\ContentType
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param \SellingPartnerApi\Model\AplusContent20201101\ContentType $contentType contentType
     *
     * @return $this
     */
    public function setContentType($contentType)
    {
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets contentSubType
     *
     * @return \SellingPartnerApi\Model\AplusContent20201101\ContentSubType
     */
    public function getContentSubType()
    {
        return $this->container['contentSubType'];
    }

    /**
     * Sets contentSubType
     *
     * @param \SellingPartnerApi\Model\AplusContent20201101\ContentSubType $contentSubType contentSubType
     *
     * @return $this
     */
    public function setContentSubType($contentSubType)
    {
        $this->container['contentSubType'] = $contentSubType;

        return $this;
    }

    /**
     * Gets contentReferenceKey
     *
     * @return \SellingPartnerApi\Model\AplusContent20201101\ContentReferenceKey
     */
    public function getContentReferenceKey()
    {
        return $this->container['contentReferenceKey'];
    }

    /**
     * Sets contentReferenceKey
     *
     * @param \SellingPartnerApi\Model\AplusContent20201101\ContentReferenceKey $contentReferenceKey contentReferenceKey
     *
     * @return $this
     */
    public function setContentReferenceKey($contentReferenceKey)
    {
        $this->container['contentReferenceKey'] = $contentReferenceKey;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
