<?php
/**
 * ListOffersResponseOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery (automatic or manual) of any replenishable item at a frequency chosen by the customer.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\Replenishment20221107;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ListOffersResponseOffer Class Doc Comment
 *
 * @category Class
 * @description An object which contains details about an offer.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListOffersResponseOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListOffersResponseOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
'asin' => 'string',
'marketplaceId' => '\SellingPartnerApi\Model\Replenishment20221107\MarketplaceId',
'eligibility' => '\SellingPartnerApi\Model\Replenishment20221107\EligibilityStatus',
'offerProgramConfiguration' => '\SellingPartnerApi\Model\Replenishment20221107\OfferProgramConfiguration',
'programType' => '\SellingPartnerApi\Model\Replenishment20221107\ProgramType',
'vendorCodes' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku' => null,
'asin' => null,
'marketplaceId' => null,
'eligibility' => null,
'offerProgramConfiguration' => null,
'programType' => null,
'vendorCodes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
'asin' => 'asin',
'marketplaceId' => 'marketplaceId',
'eligibility' => 'eligibility',
'offerProgramConfiguration' => 'offerProgramConfiguration',
'programType' => 'programType',
'vendorCodes' => 'vendorCodes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
'asin' => 'setAsin',
'marketplaceId' => 'setMarketplaceId',
'eligibility' => 'setEligibility',
'offerProgramConfiguration' => 'setOfferProgramConfiguration',
'programType' => 'setProgramType',
'vendorCodes' => 'setVendorCodes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
'asin' => 'getAsin',
'marketplaceId' => 'getMarketplaceId',
'eligibility' => 'getEligibility',
'offerProgramConfiguration' => 'getOfferProgramConfiguration',
'programType' => 'getProgramType',
'vendorCodes' => 'getVendorCodes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['eligibility'] = isset($data['eligibility']) ? $data['eligibility'] : null;
        $this->container['offerProgramConfiguration'] = isset($data['offerProgramConfiguration']) ? $data['offerProgramConfiguration'] : null;
        $this->container['programType'] = isset($data['programType']) ? $data['programType'] : null;
        $this->container['vendorCodes'] = isset($data['vendorCodes']) ? $data['vendorCodes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The SKU. This property is only supported for sellers and not for vendors.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string $asin The Amazon Standard Identification Number (ASIN).
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\MarketplaceId
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\MarketplaceId $marketplaceId marketplaceId
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets eligibility
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\EligibilityStatus
     */
    public function getEligibility()
    {
        return $this->container['eligibility'];
    }

    /**
     * Sets eligibility
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\EligibilityStatus $eligibility eligibility
     *
     * @return $this
     */
    public function setEligibility($eligibility)
    {
        $this->container['eligibility'] = $eligibility;

        return $this;
    }

    /**
     * Gets offerProgramConfiguration
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\OfferProgramConfiguration
     */
    public function getOfferProgramConfiguration()
    {
        return $this->container['offerProgramConfiguration'];
    }

    /**
     * Sets offerProgramConfiguration
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\OfferProgramConfiguration $offerProgramConfiguration offerProgramConfiguration
     *
     * @return $this
     */
    public function setOfferProgramConfiguration($offerProgramConfiguration)
    {
        $this->container['offerProgramConfiguration'] = $offerProgramConfiguration;

        return $this;
    }

    /**
     * Gets programType
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\ProgramType
     */
    public function getProgramType()
    {
        return $this->container['programType'];
    }

    /**
     * Sets programType
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\ProgramType $programType programType
     *
     * @return $this
     */
    public function setProgramType($programType)
    {
        $this->container['programType'] = $programType;

        return $this;
    }

    /**
     * Gets vendorCodes
     *
     * @return string[]
     */
    public function getVendorCodes()
    {
        return $this->container['vendorCodes'];
    }

    /**
     * Sets vendorCodes
     *
     * @param string[] $vendorCodes A list of vendor codes associated with the offer.
     *
     * @return $this
     */
    public function setVendorCodes($vendorCodes)
    {
        $this->container['vendorCodes'] = $vendorCodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
