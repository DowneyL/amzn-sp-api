<?php
/**
 * GetSellingPartnerMetricsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery (automatic or manual) of any replenishable item at a frequency chosen by the customer.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\Replenishment20221107;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * GetSellingPartnerMetricsRequest Class Doc Comment
 *
 * @category Class
 * @description The request body for the &#x60;getSellingPartnerMetrics&#x60; operation.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetSellingPartnerMetricsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetSellingPartnerMetricsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregationFrequency' => '\SellingPartnerApi\Model\Replenishment20221107\AggregationFrequency',
'timeInterval' => '\SellingPartnerApi\Model\Replenishment20221107\TimeInterval',
'metrics' => '\SellingPartnerApi\Model\Replenishment20221107\Metric[]',
'timePeriodType' => '\SellingPartnerApi\Model\Replenishment20221107\TimePeriodType',
'marketplaceId' => '\SellingPartnerApi\Model\Replenishment20221107\MarketplaceId',
'programTypes' => '\SellingPartnerApi\Model\Replenishment20221107\ProgramTypes'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregationFrequency' => null,
'timeInterval' => null,
'metrics' => null,
'timePeriodType' => null,
'marketplaceId' => null,
'programTypes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregationFrequency' => 'aggregationFrequency',
'timeInterval' => 'timeInterval',
'metrics' => 'metrics',
'timePeriodType' => 'timePeriodType',
'marketplaceId' => 'marketplaceId',
'programTypes' => 'programTypes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregationFrequency' => 'setAggregationFrequency',
'timeInterval' => 'setTimeInterval',
'metrics' => 'setMetrics',
'timePeriodType' => 'setTimePeriodType',
'marketplaceId' => 'setMarketplaceId',
'programTypes' => 'setProgramTypes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregationFrequency' => 'getAggregationFrequency',
'timeInterval' => 'getTimeInterval',
'metrics' => 'getMetrics',
'timePeriodType' => 'getTimePeriodType',
'marketplaceId' => 'getMarketplaceId',
'programTypes' => 'getProgramTypes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregationFrequency'] = isset($data['aggregationFrequency']) ? $data['aggregationFrequency'] : null;
        $this->container['timeInterval'] = isset($data['timeInterval']) ? $data['timeInterval'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['timePeriodType'] = isset($data['timePeriodType']) ? $data['timePeriodType'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['programTypes'] = isset($data['programTypes']) ? $data['programTypes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timeInterval'] === null) {
            $invalidProperties[] = "'timeInterval' can't be null";
        }
        if ($this->container['timePeriodType'] === null) {
            $invalidProperties[] = "'timePeriodType' can't be null";
        }
        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        if ($this->container['programTypes'] === null) {
            $invalidProperties[] = "'programTypes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregationFrequency
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\AggregationFrequency
     */
    public function getAggregationFrequency()
    {
        return $this->container['aggregationFrequency'];
    }

    /**
     * Sets aggregationFrequency
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\AggregationFrequency $aggregationFrequency aggregationFrequency
     *
     * @return $this
     */
    public function setAggregationFrequency($aggregationFrequency)
    {
        $this->container['aggregationFrequency'] = $aggregationFrequency;

        return $this;
    }

    /**
     * Gets timeInterval
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\TimeInterval
     */
    public function getTimeInterval()
    {
        return $this->container['timeInterval'];
    }

    /**
     * Sets timeInterval
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\TimeInterval $timeInterval timeInterval
     *
     * @return $this
     */
    public function setTimeInterval($timeInterval)
    {
        $this->container['timeInterval'] = $timeInterval;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\Metric[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\Metric[] $metrics The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned.
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets timePeriodType
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\TimePeriodType
     */
    public function getTimePeriodType()
    {
        return $this->container['timePeriodType'];
    }

    /**
     * Sets timePeriodType
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\TimePeriodType $timePeriodType timePeriodType
     *
     * @return $this
     */
    public function setTimePeriodType($timePeriodType)
    {
        $this->container['timePeriodType'] = $timePeriodType;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\MarketplaceId
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\MarketplaceId $marketplaceId marketplaceId
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets programTypes
     *
     * @return \SellingPartnerApi\Model\Replenishment20221107\ProgramTypes
     */
    public function getProgramTypes()
    {
        return $this->container['programTypes'];
    }

    /**
     * Sets programTypes
     *
     * @param \SellingPartnerApi\Model\Replenishment20221107\ProgramTypes $programTypes programTypes
     *
     * @return $this
     */
    public function setProgramTypes($programTypes)
    {
        $this->container['programTypes'] = $programTypes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
