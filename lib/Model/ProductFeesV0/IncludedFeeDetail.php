<?php
/**
 * IncludedFeeDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\ProductFeesV0;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * IncludedFeeDetail Class Doc Comment
 *
 * @category Class
 * @description The type of fee, fee amount, and other details.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IncludedFeeDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IncludedFeeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feeType' => 'string',
'feeAmount' => '\SellingPartnerApi\Model\ProductFeesV0\MoneyType',
'feePromotion' => '\SellingPartnerApi\Model\ProductFeesV0\MoneyType',
'taxAmount' => '\SellingPartnerApi\Model\ProductFeesV0\MoneyType',
'finalFee' => '\SellingPartnerApi\Model\ProductFeesV0\MoneyType'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feeType' => null,
'feeAmount' => null,
'feePromotion' => null,
'taxAmount' => null,
'finalFee' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feeType' => 'FeeType',
'feeAmount' => 'FeeAmount',
'feePromotion' => 'FeePromotion',
'taxAmount' => 'TaxAmount',
'finalFee' => 'FinalFee'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feeType' => 'setFeeType',
'feeAmount' => 'setFeeAmount',
'feePromotion' => 'setFeePromotion',
'taxAmount' => 'setTaxAmount',
'finalFee' => 'setFinalFee'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feeType' => 'getFeeType',
'feeAmount' => 'getFeeAmount',
'feePromotion' => 'getFeePromotion',
'taxAmount' => 'getTaxAmount',
'finalFee' => 'getFinalFee'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feeType'] = isset($data['feeType']) ? $data['feeType'] : null;
        $this->container['feeAmount'] = isset($data['feeAmount']) ? $data['feeAmount'] : null;
        $this->container['feePromotion'] = isset($data['feePromotion']) ? $data['feePromotion'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['finalFee'] = isset($data['finalFee']) ? $data['finalFee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['feeType'] === null) {
            $invalidProperties[] = "'feeType' can't be null";
        }
        if ($this->container['feeAmount'] === null) {
            $invalidProperties[] = "'feeAmount' can't be null";
        }
        if ($this->container['finalFee'] === null) {
            $invalidProperties[] = "'finalFee' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feeType
     *
     * @return string
     */
    public function getFeeType()
    {
        return $this->container['feeType'];
    }

    /**
     * Sets feeType
     *
     * @param string $feeType The type of fee charged to a seller.
     *
     * @return $this
     */
    public function setFeeType($feeType)
    {
        $this->container['feeType'] = $feeType;

        return $this;
    }

    /**
     * Gets feeAmount
     *
     * @return \SellingPartnerApi\Model\ProductFeesV0\MoneyType
     */
    public function getFeeAmount()
    {
        return $this->container['feeAmount'];
    }

    /**
     * Sets feeAmount
     *
     * @param \SellingPartnerApi\Model\ProductFeesV0\MoneyType $feeAmount feeAmount
     *
     * @return $this
     */
    public function setFeeAmount($feeAmount)
    {
        $this->container['feeAmount'] = $feeAmount;

        return $this;
    }

    /**
     * Gets feePromotion
     *
     * @return \SellingPartnerApi\Model\ProductFeesV0\MoneyType
     */
    public function getFeePromotion()
    {
        return $this->container['feePromotion'];
    }

    /**
     * Sets feePromotion
     *
     * @param \SellingPartnerApi\Model\ProductFeesV0\MoneyType $feePromotion feePromotion
     *
     * @return $this
     */
    public function setFeePromotion($feePromotion)
    {
        $this->container['feePromotion'] = $feePromotion;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return \SellingPartnerApi\Model\ProductFeesV0\MoneyType
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param \SellingPartnerApi\Model\ProductFeesV0\MoneyType $taxAmount taxAmount
     *
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets finalFee
     *
     * @return \SellingPartnerApi\Model\ProductFeesV0\MoneyType
     */
    public function getFinalFee()
    {
        return $this->container['finalFee'];
    }

    /**
     * Sets finalFee
     *
     * @param \SellingPartnerApi\Model\ProductFeesV0\MoneyType $finalFee finalFee
     *
     * @return $this
     */
    public function setFinalFee($finalFee)
    {
        $this->container['finalFee'] = $finalFee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
