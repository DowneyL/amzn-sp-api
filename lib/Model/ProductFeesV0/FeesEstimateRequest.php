<?php
/**
 * FeesEstimateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\ProductFeesV0;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * FeesEstimateRequest Class Doc Comment
 *
 * @category Class
 * @description A product, marketplace, and proposed price used to request estimated fees.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeesEstimateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeesEstimateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplaceId' => 'string',
'isAmazonFulfilled' => 'bool',
'priceToEstimateFees' => '\SellingPartnerApi\Model\ProductFeesV0\PriceToEstimateFees',
'identifier' => 'string',
'optionalFulfillmentProgram' => '\SellingPartnerApi\Model\ProductFeesV0\OptionalFulfillmentProgram'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplaceId' => null,
'isAmazonFulfilled' => null,
'priceToEstimateFees' => null,
'identifier' => null,
'optionalFulfillmentProgram' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplaceId' => 'MarketplaceId',
'isAmazonFulfilled' => 'IsAmazonFulfilled',
'priceToEstimateFees' => 'PriceToEstimateFees',
'identifier' => 'Identifier',
'optionalFulfillmentProgram' => 'OptionalFulfillmentProgram'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplaceId' => 'setMarketplaceId',
'isAmazonFulfilled' => 'setIsAmazonFulfilled',
'priceToEstimateFees' => 'setPriceToEstimateFees',
'identifier' => 'setIdentifier',
'optionalFulfillmentProgram' => 'setOptionalFulfillmentProgram'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplaceId' => 'getMarketplaceId',
'isAmazonFulfilled' => 'getIsAmazonFulfilled',
'priceToEstimateFees' => 'getPriceToEstimateFees',
'identifier' => 'getIdentifier',
'optionalFulfillmentProgram' => 'getOptionalFulfillmentProgram'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['isAmazonFulfilled'] = isset($data['isAmazonFulfilled']) ? $data['isAmazonFulfilled'] : null;
        $this->container['priceToEstimateFees'] = isset($data['priceToEstimateFees']) ? $data['priceToEstimateFees'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['optionalFulfillmentProgram'] = isset($data['optionalFulfillmentProgram']) ? $data['optionalFulfillmentProgram'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        if ($this->container['priceToEstimateFees'] === null) {
            $invalidProperties[] = "'priceToEstimateFees' can't be null";
        }
        if ($this->container['identifier'] === null) {
            $invalidProperties[] = "'identifier' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string $marketplaceId A marketplace identifier.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets isAmazonFulfilled
     *
     * @return bool
     */
    public function getIsAmazonFulfilled()
    {
        return $this->container['isAmazonFulfilled'];
    }

    /**
     * Sets isAmazonFulfilled
     *
     * @param bool $isAmazonFulfilled When true, the offer is fulfilled by Amazon.
     *
     * @return $this
     */
    public function setIsAmazonFulfilled($isAmazonFulfilled)
    {
        $this->container['isAmazonFulfilled'] = $isAmazonFulfilled;

        return $this;
    }

    /**
     * Gets priceToEstimateFees
     *
     * @return \SellingPartnerApi\Model\ProductFeesV0\PriceToEstimateFees
     */
    public function getPriceToEstimateFees()
    {
        return $this->container['priceToEstimateFees'];
    }

    /**
     * Sets priceToEstimateFees
     *
     * @param \SellingPartnerApi\Model\ProductFeesV0\PriceToEstimateFees $priceToEstimateFees priceToEstimateFees
     *
     * @return $this
     */
    public function setPriceToEstimateFees($priceToEstimateFees)
    {
        $this->container['priceToEstimateFees'] = $priceToEstimateFees;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier A unique identifier provided by the caller to track this request.
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets optionalFulfillmentProgram
     *
     * @return \SellingPartnerApi\Model\ProductFeesV0\OptionalFulfillmentProgram
     */
    public function getOptionalFulfillmentProgram()
    {
        return $this->container['optionalFulfillmentProgram'];
    }

    /**
     * Sets optionalFulfillmentProgram
     *
     * @param \SellingPartnerApi\Model\ProductFeesV0\OptionalFulfillmentProgram $optionalFulfillmentProgram optionalFulfillmentProgram
     *
     * @return $this
     */
    public function setOptionalFulfillmentProgram($optionalFulfillmentProgram)
    {
        $this->container['optionalFulfillmentProgram'] = $optionalFulfillmentProgram;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
