<?php
/**
 * ItemDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorShipments;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ItemDetails Class Doc Comment
 *
 * @category Class
 * @description Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'purchaseOrderNumber' => 'string',
'lotNumber' => 'string',
'expiry' => '\SellingPartnerApi\Model\VendorShipments\Expiry',
'maximumRetailPrice' => '\SellingPartnerApi\Model\VendorShipments\Money',
'handlingCode' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'purchaseOrderNumber' => null,
'lotNumber' => null,
'expiry' => null,
'maximumRetailPrice' => null,
'handlingCode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchaseOrderNumber' => 'purchaseOrderNumber',
'lotNumber' => 'lotNumber',
'expiry' => 'expiry',
'maximumRetailPrice' => 'maximumRetailPrice',
'handlingCode' => 'handlingCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchaseOrderNumber' => 'setPurchaseOrderNumber',
'lotNumber' => 'setLotNumber',
'expiry' => 'setExpiry',
'maximumRetailPrice' => 'setMaximumRetailPrice',
'handlingCode' => 'setHandlingCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchaseOrderNumber' => 'getPurchaseOrderNumber',
'lotNumber' => 'getLotNumber',
'expiry' => 'getExpiry',
'maximumRetailPrice' => 'getMaximumRetailPrice',
'handlingCode' => 'getHandlingCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HANDLING_CODE_OVERSIZED = 'Oversized';
const HANDLING_CODE_FRAGILE = 'Fragile';
const HANDLING_CODE_FOOD = 'Food';
const HANDLING_CODE_HANDLE_WITH_CARE = 'HandleWithCare';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandlingCodeAllowableValues()
    {
        return [
            self::HANDLING_CODE_OVERSIZED,
self::HANDLING_CODE_FRAGILE,
self::HANDLING_CODE_FOOD,
self::HANDLING_CODE_HANDLE_WITH_CARE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchaseOrderNumber'] = isset($data['purchaseOrderNumber']) ? $data['purchaseOrderNumber'] : null;
        $this->container['lotNumber'] = isset($data['lotNumber']) ? $data['lotNumber'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['maximumRetailPrice'] = isset($data['maximumRetailPrice']) ? $data['maximumRetailPrice'] : null;
        $this->container['handlingCode'] = isset($data['handlingCode']) ? $data['handlingCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHandlingCodeAllowableValues();
        if (!is_null($this->container['handlingCode']) && !in_array($this->container['handlingCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'handlingCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchaseOrderNumber
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchaseOrderNumber'];
    }

    /**
     * Sets purchaseOrderNumber
     *
     * @param string $purchaseOrderNumber The purchase order number for the shipment being confirmed. If the items in this shipment belong to multiple purchase order numbers that are in particular carton or pallet within the shipment, then provide the purchaseOrderNumber at the appropriate carton or pallet level. Formatting Notes: 8-character alpha-numeric code.
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchaseOrderNumber)
    {
        $this->container['purchaseOrderNumber'] = $purchaseOrderNumber;

        return $this;
    }

    /**
     * Gets lotNumber
     *
     * @return string
     */
    public function getLotNumber()
    {
        return $this->container['lotNumber'];
    }

    /**
     * Sets lotNumber
     *
     * @param string $lotNumber The batch or lot number associates an item with information the manufacturer considers relevant for traceability of the trade item to which the Element String is applied. The data may refer to the trade item itself or to items contained. This field is mandatory for all perishable items.
     *
     * @return $this
     */
    public function setLotNumber($lotNumber)
    {
        $this->container['lotNumber'] = $lotNumber;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return \SellingPartnerApi\Model\VendorShipments\Expiry
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param \SellingPartnerApi\Model\VendorShipments\Expiry $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets maximumRetailPrice
     *
     * @return \SellingPartnerApi\Model\VendorShipments\Money
     */
    public function getMaximumRetailPrice()
    {
        return $this->container['maximumRetailPrice'];
    }

    /**
     * Sets maximumRetailPrice
     *
     * @param \SellingPartnerApi\Model\VendorShipments\Money $maximumRetailPrice maximumRetailPrice
     *
     * @return $this
     */
    public function setMaximumRetailPrice($maximumRetailPrice)
    {
        $this->container['maximumRetailPrice'] = $maximumRetailPrice;

        return $this;
    }

    /**
     * Gets handlingCode
     *
     * @return string
     */
    public function getHandlingCode()
    {
        return $this->container['handlingCode'];
    }

    /**
     * Sets handlingCode
     *
     * @param string $handlingCode Identification of the instructions on how specified item/carton/pallet should be handled.
     *
     * @return $this
     */
    public function setHandlingCode($handlingCode)
    {
        $allowedValues = $this->getHandlingCodeAllowableValues();
        if (!is_null($handlingCode) && !in_array($handlingCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'handlingCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handlingCode'] = $handlingCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
