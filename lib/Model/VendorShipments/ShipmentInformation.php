<?php
/**
 * ShipmentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorShipments;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ShipmentInformation Class Doc Comment
 *
 * @category Class
 * @description Shipment Information details for Label request.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vendorDetails' => '\SellingPartnerApi\Model\VendorShipments\VendorDetails',
'buyerReferenceNumber' => 'string',
'shipToParty' => '\SellingPartnerApi\Model\VendorShipments\PartyIdentification',
'shipFromParty' => '\SellingPartnerApi\Model\VendorShipments\PartyIdentification',
'warehouseId' => 'string',
'masterTrackingId' => 'string',
'totalLabelCount' => 'int',
'shipMode' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vendorDetails' => null,
'buyerReferenceNumber' => null,
'shipToParty' => null,
'shipFromParty' => null,
'warehouseId' => null,
'masterTrackingId' => null,
'totalLabelCount' => null,
'shipMode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendorDetails' => 'vendorDetails',
'buyerReferenceNumber' => 'buyerReferenceNumber',
'shipToParty' => 'shipToParty',
'shipFromParty' => 'shipFromParty',
'warehouseId' => 'warehouseId',
'masterTrackingId' => 'masterTrackingId',
'totalLabelCount' => 'totalLabelCount',
'shipMode' => 'shipMode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendorDetails' => 'setVendorDetails',
'buyerReferenceNumber' => 'setBuyerReferenceNumber',
'shipToParty' => 'setShipToParty',
'shipFromParty' => 'setShipFromParty',
'warehouseId' => 'setWarehouseId',
'masterTrackingId' => 'setMasterTrackingId',
'totalLabelCount' => 'setTotalLabelCount',
'shipMode' => 'setShipMode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendorDetails' => 'getVendorDetails',
'buyerReferenceNumber' => 'getBuyerReferenceNumber',
'shipToParty' => 'getShipToParty',
'shipFromParty' => 'getShipFromParty',
'warehouseId' => 'getWarehouseId',
'masterTrackingId' => 'getMasterTrackingId',
'totalLabelCount' => 'getTotalLabelCount',
'shipMode' => 'getShipMode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIP_MODE_SMALL_PARCEL = 'SmallParcel';
const SHIP_MODE_LTL = 'LTL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipModeAllowableValues()
    {
        return [
            self::SHIP_MODE_SMALL_PARCEL,
self::SHIP_MODE_LTL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendorDetails'] = isset($data['vendorDetails']) ? $data['vendorDetails'] : null;
        $this->container['buyerReferenceNumber'] = isset($data['buyerReferenceNumber']) ? $data['buyerReferenceNumber'] : null;
        $this->container['shipToParty'] = isset($data['shipToParty']) ? $data['shipToParty'] : null;
        $this->container['shipFromParty'] = isset($data['shipFromParty']) ? $data['shipFromParty'] : null;
        $this->container['warehouseId'] = isset($data['warehouseId']) ? $data['warehouseId'] : null;
        $this->container['masterTrackingId'] = isset($data['masterTrackingId']) ? $data['masterTrackingId'] : null;
        $this->container['totalLabelCount'] = isset($data['totalLabelCount']) ? $data['totalLabelCount'] : null;
        $this->container['shipMode'] = isset($data['shipMode']) ? $data['shipMode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShipModeAllowableValues();
        if (!is_null($this->container['shipMode']) && !in_array($this->container['shipMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipMode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendorDetails
     *
     * @return \SellingPartnerApi\Model\VendorShipments\VendorDetails
     */
    public function getVendorDetails()
    {
        return $this->container['vendorDetails'];
    }

    /**
     * Sets vendorDetails
     *
     * @param \SellingPartnerApi\Model\VendorShipments\VendorDetails $vendorDetails vendorDetails
     *
     * @return $this
     */
    public function setVendorDetails($vendorDetails)
    {
        $this->container['vendorDetails'] = $vendorDetails;

        return $this;
    }

    /**
     * Gets buyerReferenceNumber
     *
     * @return string
     */
    public function getBuyerReferenceNumber()
    {
        return $this->container['buyerReferenceNumber'];
    }

    /**
     * Sets buyerReferenceNumber
     *
     * @param string $buyerReferenceNumber Buyer Reference number which is a unique number.
     *
     * @return $this
     */
    public function setBuyerReferenceNumber($buyerReferenceNumber)
    {
        $this->container['buyerReferenceNumber'] = $buyerReferenceNumber;

        return $this;
    }

    /**
     * Gets shipToParty
     *
     * @return \SellingPartnerApi\Model\VendorShipments\PartyIdentification
     */
    public function getShipToParty()
    {
        return $this->container['shipToParty'];
    }

    /**
     * Sets shipToParty
     *
     * @param \SellingPartnerApi\Model\VendorShipments\PartyIdentification $shipToParty shipToParty
     *
     * @return $this
     */
    public function setShipToParty($shipToParty)
    {
        $this->container['shipToParty'] = $shipToParty;

        return $this;
    }

    /**
     * Gets shipFromParty
     *
     * @return \SellingPartnerApi\Model\VendorShipments\PartyIdentification
     */
    public function getShipFromParty()
    {
        return $this->container['shipFromParty'];
    }

    /**
     * Sets shipFromParty
     *
     * @param \SellingPartnerApi\Model\VendorShipments\PartyIdentification $shipFromParty shipFromParty
     *
     * @return $this
     */
    public function setShipFromParty($shipFromParty)
    {
        $this->container['shipFromParty'] = $shipFromParty;

        return $this;
    }

    /**
     * Gets warehouseId
     *
     * @return string
     */
    public function getWarehouseId()
    {
        return $this->container['warehouseId'];
    }

    /**
     * Sets warehouseId
     *
     * @param string $warehouseId Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.
     *
     * @return $this
     */
    public function setWarehouseId($warehouseId)
    {
        $this->container['warehouseId'] = $warehouseId;

        return $this;
    }

    /**
     * Gets masterTrackingId
     *
     * @return string
     */
    public function getMasterTrackingId()
    {
        return $this->container['masterTrackingId'];
    }

    /**
     * Sets masterTrackingId
     *
     * @param string $masterTrackingId Unique Id with  which  the shipment can be tracked for Small Parcels.
     *
     * @return $this
     */
    public function setMasterTrackingId($masterTrackingId)
    {
        $this->container['masterTrackingId'] = $masterTrackingId;

        return $this;
    }

    /**
     * Gets totalLabelCount
     *
     * @return int
     */
    public function getTotalLabelCount()
    {
        return $this->container['totalLabelCount'];
    }

    /**
     * Sets totalLabelCount
     *
     * @param int $totalLabelCount Number of Labels that are created as part of this shipment.
     *
     * @return $this
     */
    public function setTotalLabelCount($totalLabelCount)
    {
        $this->container['totalLabelCount'] = $totalLabelCount;

        return $this;
    }

    /**
     * Gets shipMode
     *
     * @return string
     */
    public function getShipMode()
    {
        return $this->container['shipMode'];
    }

    /**
     * Sets shipMode
     *
     * @param string $shipMode Type of shipment whether it is Small Parcel
     *
     * @return $this
     */
    public function setShipMode($shipMode)
    {
        $allowedValues = $this->getShipModeAllowableValues();
        if (!is_null($shipMode) && !in_array($shipMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipMode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipMode'] = $shipMode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
