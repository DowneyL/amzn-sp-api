<?php
/**
 * Stop
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorShipments;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * Stop Class Doc Comment
 *
 * @category Class
 * @description Contractual or operational port or point relevant to the movement of the cargo.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Stop implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Stop';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'functionCode' => 'string',
'locationIdentification' => '\SellingPartnerApi\Model\VendorShipments\Location',
'arrivalTime' => '\DateTime',
'departureTime' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'functionCode' => null,
'locationIdentification' => null,
'arrivalTime' => 'date-time',
'departureTime' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'functionCode' => 'functionCode',
'locationIdentification' => 'locationIdentification',
'arrivalTime' => 'arrivalTime',
'departureTime' => 'departureTime'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'functionCode' => 'setFunctionCode',
'locationIdentification' => 'setLocationIdentification',
'arrivalTime' => 'setArrivalTime',
'departureTime' => 'setDepartureTime'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'functionCode' => 'getFunctionCode',
'locationIdentification' => 'getLocationIdentification',
'arrivalTime' => 'getArrivalTime',
'departureTime' => 'getDepartureTime'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FUNCTION_CODE_PORT_OF_DISCHARGE = 'PortOfDischarge';
const FUNCTION_CODE_FREIGHT_PAYABLE_AT = 'FreightPayableAt';
const FUNCTION_CODE_PORT_OF_LOADING = 'PortOfLoading';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFunctionCodeAllowableValues()
    {
        return [
            self::FUNCTION_CODE_PORT_OF_DISCHARGE,
self::FUNCTION_CODE_FREIGHT_PAYABLE_AT,
self::FUNCTION_CODE_PORT_OF_LOADING,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['functionCode'] = isset($data['functionCode']) ? $data['functionCode'] : null;
        $this->container['locationIdentification'] = isset($data['locationIdentification']) ? $data['locationIdentification'] : null;
        $this->container['arrivalTime'] = isset($data['arrivalTime']) ? $data['arrivalTime'] : null;
        $this->container['departureTime'] = isset($data['departureTime']) ? $data['departureTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['functionCode'] === null) {
            $invalidProperties[] = "'functionCode' can't be null";
        }
        $allowedValues = $this->getFunctionCodeAllowableValues();
        if (!is_null($this->container['functionCode']) && !in_array($this->container['functionCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'functionCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets functionCode
     *
     * @return string
     */
    public function getFunctionCode()
    {
        return $this->container['functionCode'];
    }

    /**
     * Sets functionCode
     *
     * @param string $functionCode Provide the function code.
     *
     * @return $this
     */
    public function setFunctionCode($functionCode)
    {
        $allowedValues = $this->getFunctionCodeAllowableValues();
        if (!in_array($functionCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'functionCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['functionCode'] = $functionCode;

        return $this;
    }

    /**
     * Gets locationIdentification
     *
     * @return \SellingPartnerApi\Model\VendorShipments\Location
     */
    public function getLocationIdentification()
    {
        return $this->container['locationIdentification'];
    }

    /**
     * Sets locationIdentification
     *
     * @param \SellingPartnerApi\Model\VendorShipments\Location $locationIdentification locationIdentification
     *
     * @return $this
     */
    public function setLocationIdentification($locationIdentification)
    {
        $this->container['locationIdentification'] = $locationIdentification;

        return $this;
    }

    /**
     * Gets arrivalTime
     *
     * @return \DateTime
     */
    public function getArrivalTime()
    {
        return $this->container['arrivalTime'];
    }

    /**
     * Sets arrivalTime
     *
     * @param \DateTime $arrivalTime Date and time of the arrival of the cargo.
     *
     * @return $this
     */
    public function setArrivalTime($arrivalTime)
    {
        $this->container['arrivalTime'] = $arrivalTime;

        return $this;
    }

    /**
     * Gets departureTime
     *
     * @return \DateTime
     */
    public function getDepartureTime()
    {
        return $this->container['departureTime'];
    }

    /**
     * Sets departureTime
     *
     * @param \DateTime $departureTime Date and time of the departure of the cargo.
     *
     * @return $this
     */
    public function setDepartureTime($departureTime)
    {
        $this->container['departureTime'] = $departureTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
