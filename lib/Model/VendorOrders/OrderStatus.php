<?php
/**
 * OrderStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorOrders;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * OrderStatus Class Doc Comment
 *
 * @category Class
 * @description Current status of a purchase order.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'purchaseOrderNumber' => 'string',
'purchaseOrderStatus' => 'string',
'purchaseOrderDate' => '\DateTime',
'lastUpdatedDate' => '\DateTime',
'sellingParty' => '\SellingPartnerApi\Model\VendorOrders\PartyIdentification',
'shipToParty' => '\SellingPartnerApi\Model\VendorOrders\PartyIdentification',
'itemStatus' => '\SellingPartnerApi\Model\VendorOrders\ItemStatus'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'purchaseOrderNumber' => null,
'purchaseOrderStatus' => null,
'purchaseOrderDate' => 'date-time',
'lastUpdatedDate' => 'date-time',
'sellingParty' => null,
'shipToParty' => null,
'itemStatus' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchaseOrderNumber' => 'purchaseOrderNumber',
'purchaseOrderStatus' => 'purchaseOrderStatus',
'purchaseOrderDate' => 'purchaseOrderDate',
'lastUpdatedDate' => 'lastUpdatedDate',
'sellingParty' => 'sellingParty',
'shipToParty' => 'shipToParty',
'itemStatus' => 'itemStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchaseOrderNumber' => 'setPurchaseOrderNumber',
'purchaseOrderStatus' => 'setPurchaseOrderStatus',
'purchaseOrderDate' => 'setPurchaseOrderDate',
'lastUpdatedDate' => 'setLastUpdatedDate',
'sellingParty' => 'setSellingParty',
'shipToParty' => 'setShipToParty',
'itemStatus' => 'setItemStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchaseOrderNumber' => 'getPurchaseOrderNumber',
'purchaseOrderStatus' => 'getPurchaseOrderStatus',
'purchaseOrderDate' => 'getPurchaseOrderDate',
'lastUpdatedDate' => 'getLastUpdatedDate',
'sellingParty' => 'getSellingParty',
'shipToParty' => 'getShipToParty',
'itemStatus' => 'getItemStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PURCHASE_ORDER_STATUS_OPEN = 'OPEN';
const PURCHASE_ORDER_STATUS_CLOSED = 'CLOSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurchaseOrderStatusAllowableValues()
    {
        return [
            self::PURCHASE_ORDER_STATUS_OPEN,
self::PURCHASE_ORDER_STATUS_CLOSED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchaseOrderNumber'] = isset($data['purchaseOrderNumber']) ? $data['purchaseOrderNumber'] : null;
        $this->container['purchaseOrderStatus'] = isset($data['purchaseOrderStatus']) ? $data['purchaseOrderStatus'] : null;
        $this->container['purchaseOrderDate'] = isset($data['purchaseOrderDate']) ? $data['purchaseOrderDate'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['sellingParty'] = isset($data['sellingParty']) ? $data['sellingParty'] : null;
        $this->container['shipToParty'] = isset($data['shipToParty']) ? $data['shipToParty'] : null;
        $this->container['itemStatus'] = isset($data['itemStatus']) ? $data['itemStatus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchaseOrderNumber'] === null) {
            $invalidProperties[] = "'purchaseOrderNumber' can't be null";
        }
        if ($this->container['purchaseOrderStatus'] === null) {
            $invalidProperties[] = "'purchaseOrderStatus' can't be null";
        }
        $allowedValues = $this->getPurchaseOrderStatusAllowableValues();
        if (!is_null($this->container['purchaseOrderStatus']) && !in_array($this->container['purchaseOrderStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'purchaseOrderStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['purchaseOrderDate'] === null) {
            $invalidProperties[] = "'purchaseOrderDate' can't be null";
        }
        if ($this->container['sellingParty'] === null) {
            $invalidProperties[] = "'sellingParty' can't be null";
        }
        if ($this->container['shipToParty'] === null) {
            $invalidProperties[] = "'shipToParty' can't be null";
        }
        if ($this->container['itemStatus'] === null) {
            $invalidProperties[] = "'itemStatus' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchaseOrderNumber
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchaseOrderNumber'];
    }

    /**
     * Sets purchaseOrderNumber
     *
     * @param string $purchaseOrderNumber The buyer's purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchaseOrderNumber)
    {
        $this->container['purchaseOrderNumber'] = $purchaseOrderNumber;

        return $this;
    }

    /**
     * Gets purchaseOrderStatus
     *
     * @return string
     */
    public function getPurchaseOrderStatus()
    {
        return $this->container['purchaseOrderStatus'];
    }

    /**
     * Sets purchaseOrderStatus
     *
     * @param string $purchaseOrderStatus The status of the buyer's purchase order for this order.
     *
     * @return $this
     */
    public function setPurchaseOrderStatus($purchaseOrderStatus)
    {
        $allowedValues = $this->getPurchaseOrderStatusAllowableValues();
        if (!in_array($purchaseOrderStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'purchaseOrderStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purchaseOrderStatus'] = $purchaseOrderStatus;

        return $this;
    }

    /**
     * Gets purchaseOrderDate
     *
     * @return \DateTime
     */
    public function getPurchaseOrderDate()
    {
        return $this->container['purchaseOrderDate'];
    }

    /**
     * Sets purchaseOrderDate
     *
     * @param \DateTime $purchaseOrderDate The date the purchase order was placed. Must be in ISO-8601 date/time format.
     *
     * @return $this
     */
    public function setPurchaseOrderDate($purchaseOrderDate)
    {
        $this->container['purchaseOrderDate'] = $purchaseOrderDate;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets sellingParty
     *
     * @return \SellingPartnerApi\Model\VendorOrders\PartyIdentification
     */
    public function getSellingParty()
    {
        return $this->container['sellingParty'];
    }

    /**
     * Sets sellingParty
     *
     * @param \SellingPartnerApi\Model\VendorOrders\PartyIdentification $sellingParty sellingParty
     *
     * @return $this
     */
    public function setSellingParty($sellingParty)
    {
        $this->container['sellingParty'] = $sellingParty;

        return $this;
    }

    /**
     * Gets shipToParty
     *
     * @return \SellingPartnerApi\Model\VendorOrders\PartyIdentification
     */
    public function getShipToParty()
    {
        return $this->container['shipToParty'];
    }

    /**
     * Sets shipToParty
     *
     * @param \SellingPartnerApi\Model\VendorOrders\PartyIdentification $shipToParty shipToParty
     *
     * @return $this
     */
    public function setShipToParty($shipToParty)
    {
        $this->container['shipToParty'] = $shipToParty;

        return $this;
    }

    /**
     * Gets itemStatus
     *
     * @return \SellingPartnerApi\Model\VendorOrders\ItemStatus
     */
    public function getItemStatus()
    {
        return $this->container['itemStatus'];
    }

    /**
     * Sets itemStatus
     *
     * @param \SellingPartnerApi\Model\VendorOrders\ItemStatus $itemStatus itemStatus
     *
     * @return $this
     */
    public function setItemStatus($itemStatus)
    {
        $this->container['itemStatus'] = $itemStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
