<?php
/**
 * ImportDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorOrders;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ImportDetails Class Doc Comment
 *
 * @category Class
 * @description Import details for an import order.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImportDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'methodOfPayment' => 'string',
'internationalCommercialTerms' => 'string',
'portOfDelivery' => 'string',
'importContainers' => 'string',
'shippingInstructions' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'methodOfPayment' => null,
'internationalCommercialTerms' => null,
'portOfDelivery' => null,
'importContainers' => null,
'shippingInstructions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'methodOfPayment' => 'methodOfPayment',
'internationalCommercialTerms' => 'internationalCommercialTerms',
'portOfDelivery' => 'portOfDelivery',
'importContainers' => 'importContainers',
'shippingInstructions' => 'shippingInstructions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'methodOfPayment' => 'setMethodOfPayment',
'internationalCommercialTerms' => 'setInternationalCommercialTerms',
'portOfDelivery' => 'setPortOfDelivery',
'importContainers' => 'setImportContainers',
'shippingInstructions' => 'setShippingInstructions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'methodOfPayment' => 'getMethodOfPayment',
'internationalCommercialTerms' => 'getInternationalCommercialTerms',
'portOfDelivery' => 'getPortOfDelivery',
'importContainers' => 'getImportContainers',
'shippingInstructions' => 'getShippingInstructions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const METHOD_OF_PAYMENT_PAID_BY_BUYER = 'PaidByBuyer';
const METHOD_OF_PAYMENT_COLLECT_ON_DELIVERY = 'CollectOnDelivery';
const METHOD_OF_PAYMENT_DEFINED_BY_BUYER_AND_SELLER = 'DefinedByBuyerAndSeller';
const METHOD_OF_PAYMENT_FOB_PORT_OF_CALL = 'FOBPortOfCall';
const METHOD_OF_PAYMENT_PREPAID_BY_SELLER = 'PrepaidBySeller';
const METHOD_OF_PAYMENT_PAID_BY_SELLER = 'PaidBySeller';
const INTERNATIONAL_COMMERCIAL_TERMS_EX_WORKS = 'ExWorks';
const INTERNATIONAL_COMMERCIAL_TERMS_FREE_CARRIER = 'FreeCarrier';
const INTERNATIONAL_COMMERCIAL_TERMS_FREE_ON_BOARD = 'FreeOnBoard';
const INTERNATIONAL_COMMERCIAL_TERMS_FREE_ALONG_SIDE_SHIP = 'FreeAlongSideShip';
const INTERNATIONAL_COMMERCIAL_TERMS_CARRIAGE_PAID_TO = 'CarriagePaidTo';
const INTERNATIONAL_COMMERCIAL_TERMS_COST_AND_FREIGHT = 'CostAndFreight';
const INTERNATIONAL_COMMERCIAL_TERMS_CARRIAGE_AND_INSURANCE_PAID_TO = 'CarriageAndInsurancePaidTo';
const INTERNATIONAL_COMMERCIAL_TERMS_COST_INSURANCE_AND_FREIGHT = 'CostInsuranceAndFreight';
const INTERNATIONAL_COMMERCIAL_TERMS_DELIVERED_AT_TERMINAL = 'DeliveredAtTerminal';
const INTERNATIONAL_COMMERCIAL_TERMS_DELIVERED_AT_PLACE = 'DeliveredAtPlace';
const INTERNATIONAL_COMMERCIAL_TERMS_DELIVER_DUTY_PAID = 'DeliverDutyPaid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodOfPaymentAllowableValues()
    {
        return [
            self::METHOD_OF_PAYMENT_PAID_BY_BUYER,
self::METHOD_OF_PAYMENT_COLLECT_ON_DELIVERY,
self::METHOD_OF_PAYMENT_DEFINED_BY_BUYER_AND_SELLER,
self::METHOD_OF_PAYMENT_FOB_PORT_OF_CALL,
self::METHOD_OF_PAYMENT_PREPAID_BY_SELLER,
self::METHOD_OF_PAYMENT_PAID_BY_SELLER,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInternationalCommercialTermsAllowableValues()
    {
        return [
            self::INTERNATIONAL_COMMERCIAL_TERMS_EX_WORKS,
self::INTERNATIONAL_COMMERCIAL_TERMS_FREE_CARRIER,
self::INTERNATIONAL_COMMERCIAL_TERMS_FREE_ON_BOARD,
self::INTERNATIONAL_COMMERCIAL_TERMS_FREE_ALONG_SIDE_SHIP,
self::INTERNATIONAL_COMMERCIAL_TERMS_CARRIAGE_PAID_TO,
self::INTERNATIONAL_COMMERCIAL_TERMS_COST_AND_FREIGHT,
self::INTERNATIONAL_COMMERCIAL_TERMS_CARRIAGE_AND_INSURANCE_PAID_TO,
self::INTERNATIONAL_COMMERCIAL_TERMS_COST_INSURANCE_AND_FREIGHT,
self::INTERNATIONAL_COMMERCIAL_TERMS_DELIVERED_AT_TERMINAL,
self::INTERNATIONAL_COMMERCIAL_TERMS_DELIVERED_AT_PLACE,
self::INTERNATIONAL_COMMERCIAL_TERMS_DELIVER_DUTY_PAID,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['methodOfPayment'] = isset($data['methodOfPayment']) ? $data['methodOfPayment'] : null;
        $this->container['internationalCommercialTerms'] = isset($data['internationalCommercialTerms']) ? $data['internationalCommercialTerms'] : null;
        $this->container['portOfDelivery'] = isset($data['portOfDelivery']) ? $data['portOfDelivery'] : null;
        $this->container['importContainers'] = isset($data['importContainers']) ? $data['importContainers'] : null;
        $this->container['shippingInstructions'] = isset($data['shippingInstructions']) ? $data['shippingInstructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMethodOfPaymentAllowableValues();
        if (!is_null($this->container['methodOfPayment']) && !in_array($this->container['methodOfPayment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'methodOfPayment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInternationalCommercialTermsAllowableValues();
        if (!is_null($this->container['internationalCommercialTerms']) && !in_array($this->container['internationalCommercialTerms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'internationalCommercialTerms', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets methodOfPayment
     *
     * @return string
     */
    public function getMethodOfPayment()
    {
        return $this->container['methodOfPayment'];
    }

    /**
     * Sets methodOfPayment
     *
     * @param string $methodOfPayment If the recipient requests, contains the shipment method of payment. This is for import PO's only.
     *
     * @return $this
     */
    public function setMethodOfPayment($methodOfPayment)
    {
        $allowedValues = $this->getMethodOfPaymentAllowableValues();
        if (!is_null($methodOfPayment) && !in_array($methodOfPayment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'methodOfPayment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['methodOfPayment'] = $methodOfPayment;

        return $this;
    }

    /**
     * Gets internationalCommercialTerms
     *
     * @return string
     */
    public function getInternationalCommercialTerms()
    {
        return $this->container['internationalCommercialTerms'];
    }

    /**
     * Sets internationalCommercialTerms
     *
     * @param string $internationalCommercialTerms Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only.
     *
     * @return $this
     */
    public function setInternationalCommercialTerms($internationalCommercialTerms)
    {
        $allowedValues = $this->getInternationalCommercialTermsAllowableValues();
        if (!is_null($internationalCommercialTerms) && !in_array($internationalCommercialTerms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'internationalCommercialTerms', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['internationalCommercialTerms'] = $internationalCommercialTerms;

        return $this;
    }

    /**
     * Gets portOfDelivery
     *
     * @return string
     */
    public function getPortOfDelivery()
    {
        return $this->container['portOfDelivery'];
    }

    /**
     * Sets portOfDelivery
     *
     * @param string $portOfDelivery The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.
     *
     * @return $this
     */
    public function setPortOfDelivery($portOfDelivery)
    {
        $this->container['portOfDelivery'] = $portOfDelivery;

        return $this;
    }

    /**
     * Gets importContainers
     *
     * @return string
     */
    public function getImportContainers()
    {
        return $this->container['importContainers'];
    }

    /**
     * Sets importContainers
     *
     * @param string $importContainers Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40'(40-foot container), 40'HC (40-foot high-capacity container), 45', 45'HC, 30', 30'HC, 20', 20'HC.
     *
     * @return $this
     */
    public function setImportContainers($importContainers)
    {
        $this->container['importContainers'] = $importContainers;

        return $this;
    }

    /**
     * Gets shippingInstructions
     *
     * @return string
     */
    public function getShippingInstructions()
    {
        return $this->container['shippingInstructions'];
    }

    /**
     * Sets shippingInstructions
     *
     * @param string $shippingInstructions Special instructions regarding the shipment. This field is for import purchase orders.
     *
     * @return $this
     */
    public function setShippingInstructions($shippingInstructions)
    {
        $this->container['shippingInstructions'] = $shippingInstructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
