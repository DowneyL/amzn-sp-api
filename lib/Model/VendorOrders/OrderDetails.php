<?php
/**
 * OrderDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorOrders;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * OrderDetails Class Doc Comment
 *
 * @category Class
 * @description Details of an order.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'purchaseOrderDate' => '\DateTime',
'purchaseOrderChangedDate' => '\DateTime',
'purchaseOrderStateChangedDate' => '\DateTime',
'purchaseOrderType' => 'string',
'importDetails' => '\SellingPartnerApi\Model\VendorOrders\ImportDetails',
'dealCode' => 'string',
'paymentMethod' => 'string',
'buyingParty' => '\SellingPartnerApi\Model\VendorOrders\PartyIdentification',
'sellingParty' => '\SellingPartnerApi\Model\VendorOrders\PartyIdentification',
'shipToParty' => '\SellingPartnerApi\Model\VendorOrders\PartyIdentification',
'billToParty' => '\SellingPartnerApi\Model\VendorOrders\PartyIdentification',
'shipWindow' => '\SellingPartnerApi\Model\VendorOrders\DateTimeInterval',
'deliveryWindow' => '\SellingPartnerApi\Model\VendorOrders\DateTimeInterval',
'items' => '\SellingPartnerApi\Model\VendorOrders\OrderItem[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'purchaseOrderDate' => 'date-time',
'purchaseOrderChangedDate' => 'date-time',
'purchaseOrderStateChangedDate' => 'date-time',
'purchaseOrderType' => null,
'importDetails' => null,
'dealCode' => null,
'paymentMethod' => null,
'buyingParty' => null,
'sellingParty' => null,
'shipToParty' => null,
'billToParty' => null,
'shipWindow' => null,
'deliveryWindow' => null,
'items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchaseOrderDate' => 'purchaseOrderDate',
'purchaseOrderChangedDate' => 'purchaseOrderChangedDate',
'purchaseOrderStateChangedDate' => 'purchaseOrderStateChangedDate',
'purchaseOrderType' => 'purchaseOrderType',
'importDetails' => 'importDetails',
'dealCode' => 'dealCode',
'paymentMethod' => 'paymentMethod',
'buyingParty' => 'buyingParty',
'sellingParty' => 'sellingParty',
'shipToParty' => 'shipToParty',
'billToParty' => 'billToParty',
'shipWindow' => 'shipWindow',
'deliveryWindow' => 'deliveryWindow',
'items' => 'items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchaseOrderDate' => 'setPurchaseOrderDate',
'purchaseOrderChangedDate' => 'setPurchaseOrderChangedDate',
'purchaseOrderStateChangedDate' => 'setPurchaseOrderStateChangedDate',
'purchaseOrderType' => 'setPurchaseOrderType',
'importDetails' => 'setImportDetails',
'dealCode' => 'setDealCode',
'paymentMethod' => 'setPaymentMethod',
'buyingParty' => 'setBuyingParty',
'sellingParty' => 'setSellingParty',
'shipToParty' => 'setShipToParty',
'billToParty' => 'setBillToParty',
'shipWindow' => 'setShipWindow',
'deliveryWindow' => 'setDeliveryWindow',
'items' => 'setItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchaseOrderDate' => 'getPurchaseOrderDate',
'purchaseOrderChangedDate' => 'getPurchaseOrderChangedDate',
'purchaseOrderStateChangedDate' => 'getPurchaseOrderStateChangedDate',
'purchaseOrderType' => 'getPurchaseOrderType',
'importDetails' => 'getImportDetails',
'dealCode' => 'getDealCode',
'paymentMethod' => 'getPaymentMethod',
'buyingParty' => 'getBuyingParty',
'sellingParty' => 'getSellingParty',
'shipToParty' => 'getShipToParty',
'billToParty' => 'getBillToParty',
'shipWindow' => 'getShipWindow',
'deliveryWindow' => 'getDeliveryWindow',
'items' => 'getItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PURCHASE_ORDER_TYPE_REGULAR_ORDER = 'RegularOrder';
const PURCHASE_ORDER_TYPE_CONSIGNED_ORDER = 'ConsignedOrder';
const PURCHASE_ORDER_TYPE_NEW_PRODUCT_INTRODUCTION = 'NewProductIntroduction';
const PURCHASE_ORDER_TYPE_RUSH_ORDER = 'RushOrder';
const PAYMENT_METHOD_INVOICE = 'Invoice';
const PAYMENT_METHOD_CONSIGNMENT = 'Consignment';
const PAYMENT_METHOD_CREDIT_CARD = 'CreditCard';
const PAYMENT_METHOD_PREPAID = 'Prepaid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurchaseOrderTypeAllowableValues()
    {
        return [
            self::PURCHASE_ORDER_TYPE_REGULAR_ORDER,
self::PURCHASE_ORDER_TYPE_CONSIGNED_ORDER,
self::PURCHASE_ORDER_TYPE_NEW_PRODUCT_INTRODUCTION,
self::PURCHASE_ORDER_TYPE_RUSH_ORDER,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_INVOICE,
self::PAYMENT_METHOD_CONSIGNMENT,
self::PAYMENT_METHOD_CREDIT_CARD,
self::PAYMENT_METHOD_PREPAID,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchaseOrderDate'] = isset($data['purchaseOrderDate']) ? $data['purchaseOrderDate'] : null;
        $this->container['purchaseOrderChangedDate'] = isset($data['purchaseOrderChangedDate']) ? $data['purchaseOrderChangedDate'] : null;
        $this->container['purchaseOrderStateChangedDate'] = isset($data['purchaseOrderStateChangedDate']) ? $data['purchaseOrderStateChangedDate'] : null;
        $this->container['purchaseOrderType'] = isset($data['purchaseOrderType']) ? $data['purchaseOrderType'] : null;
        $this->container['importDetails'] = isset($data['importDetails']) ? $data['importDetails'] : null;
        $this->container['dealCode'] = isset($data['dealCode']) ? $data['dealCode'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['buyingParty'] = isset($data['buyingParty']) ? $data['buyingParty'] : null;
        $this->container['sellingParty'] = isset($data['sellingParty']) ? $data['sellingParty'] : null;
        $this->container['shipToParty'] = isset($data['shipToParty']) ? $data['shipToParty'] : null;
        $this->container['billToParty'] = isset($data['billToParty']) ? $data['billToParty'] : null;
        $this->container['shipWindow'] = isset($data['shipWindow']) ? $data['shipWindow'] : null;
        $this->container['deliveryWindow'] = isset($data['deliveryWindow']) ? $data['deliveryWindow'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchaseOrderDate'] === null) {
            $invalidProperties[] = "'purchaseOrderDate' can't be null";
        }
        if ($this->container['purchaseOrderStateChangedDate'] === null) {
            $invalidProperties[] = "'purchaseOrderStateChangedDate' can't be null";
        }
        $allowedValues = $this->getPurchaseOrderTypeAllowableValues();
        if (!is_null($this->container['purchaseOrderType']) && !in_array($this->container['purchaseOrderType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'purchaseOrderType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['paymentMethod']) && !in_array($this->container['paymentMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paymentMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchaseOrderDate
     *
     * @return \DateTime
     */
    public function getPurchaseOrderDate()
    {
        return $this->container['purchaseOrderDate'];
    }

    /**
     * Sets purchaseOrderDate
     *
     * @param \DateTime $purchaseOrderDate The date the purchase order was placed. Must be in ISO-8601 date/time format.
     *
     * @return $this
     */
    public function setPurchaseOrderDate($purchaseOrderDate)
    {
        $this->container['purchaseOrderDate'] = $purchaseOrderDate;

        return $this;
    }

    /**
     * Gets purchaseOrderChangedDate
     *
     * @return \DateTime
     */
    public function getPurchaseOrderChangedDate()
    {
        return $this->container['purchaseOrderChangedDate'];
    }

    /**
     * Sets purchaseOrderChangedDate
     *
     * @param \DateTime $purchaseOrderChangedDate The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than 'purchaseOrderDate'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
     *
     * @return $this
     */
    public function setPurchaseOrderChangedDate($purchaseOrderChangedDate)
    {
        $this->container['purchaseOrderChangedDate'] = $purchaseOrderChangedDate;

        return $this;
    }

    /**
     * Gets purchaseOrderStateChangedDate
     *
     * @return \DateTime
     */
    public function getPurchaseOrderStateChangedDate()
    {
        return $this->container['purchaseOrderStateChangedDate'];
    }

    /**
     * Sets purchaseOrderStateChangedDate
     *
     * @param \DateTime $purchaseOrderStateChangedDate The date when current purchase order state was changed. Current purchase order state is available in the field 'purchaseOrderState'. Must be in ISO-8601 date/time format.
     *
     * @return $this
     */
    public function setPurchaseOrderStateChangedDate($purchaseOrderStateChangedDate)
    {
        $this->container['purchaseOrderStateChangedDate'] = $purchaseOrderStateChangedDate;

        return $this;
    }

    /**
     * Gets purchaseOrderType
     *
     * @return string
     */
    public function getPurchaseOrderType()
    {
        return $this->container['purchaseOrderType'];
    }

    /**
     * Sets purchaseOrderType
     *
     * @param string $purchaseOrderType Type of purchase order.
     *
     * @return $this
     */
    public function setPurchaseOrderType($purchaseOrderType)
    {
        $allowedValues = $this->getPurchaseOrderTypeAllowableValues();
        if (!is_null($purchaseOrderType) && !in_array($purchaseOrderType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'purchaseOrderType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purchaseOrderType'] = $purchaseOrderType;

        return $this;
    }

    /**
     * Gets importDetails
     *
     * @return \SellingPartnerApi\Model\VendorOrders\ImportDetails
     */
    public function getImportDetails()
    {
        return $this->container['importDetails'];
    }

    /**
     * Sets importDetails
     *
     * @param \SellingPartnerApi\Model\VendorOrders\ImportDetails $importDetails importDetails
     *
     * @return $this
     */
    public function setImportDetails($importDetails)
    {
        $this->container['importDetails'] = $importDetails;

        return $this;
    }

    /**
     * Gets dealCode
     *
     * @return string
     */
    public function getDealCode()
    {
        return $this->container['dealCode'];
    }

    /**
     * Sets dealCode
     *
     * @param string $dealCode If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.
     *
     * @return $this
     */
    public function setDealCode($dealCode)
    {
        $this->container['dealCode'] = $dealCode;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string $paymentMethod Payment method used.
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($paymentMethod) && !in_array($paymentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets buyingParty
     *
     * @return \SellingPartnerApi\Model\VendorOrders\PartyIdentification
     */
    public function getBuyingParty()
    {
        return $this->container['buyingParty'];
    }

    /**
     * Sets buyingParty
     *
     * @param \SellingPartnerApi\Model\VendorOrders\PartyIdentification $buyingParty buyingParty
     *
     * @return $this
     */
    public function setBuyingParty($buyingParty)
    {
        $this->container['buyingParty'] = $buyingParty;

        return $this;
    }

    /**
     * Gets sellingParty
     *
     * @return \SellingPartnerApi\Model\VendorOrders\PartyIdentification
     */
    public function getSellingParty()
    {
        return $this->container['sellingParty'];
    }

    /**
     * Sets sellingParty
     *
     * @param \SellingPartnerApi\Model\VendorOrders\PartyIdentification $sellingParty sellingParty
     *
     * @return $this
     */
    public function setSellingParty($sellingParty)
    {
        $this->container['sellingParty'] = $sellingParty;

        return $this;
    }

    /**
     * Gets shipToParty
     *
     * @return \SellingPartnerApi\Model\VendorOrders\PartyIdentification
     */
    public function getShipToParty()
    {
        return $this->container['shipToParty'];
    }

    /**
     * Sets shipToParty
     *
     * @param \SellingPartnerApi\Model\VendorOrders\PartyIdentification $shipToParty shipToParty
     *
     * @return $this
     */
    public function setShipToParty($shipToParty)
    {
        $this->container['shipToParty'] = $shipToParty;

        return $this;
    }

    /**
     * Gets billToParty
     *
     * @return \SellingPartnerApi\Model\VendorOrders\PartyIdentification
     */
    public function getBillToParty()
    {
        return $this->container['billToParty'];
    }

    /**
     * Sets billToParty
     *
     * @param \SellingPartnerApi\Model\VendorOrders\PartyIdentification $billToParty billToParty
     *
     * @return $this
     */
    public function setBillToParty($billToParty)
    {
        $this->container['billToParty'] = $billToParty;

        return $this;
    }

    /**
     * Gets shipWindow
     *
     * @return \SellingPartnerApi\Model\VendorOrders\DateTimeInterval
     */
    public function getShipWindow()
    {
        return $this->container['shipWindow'];
    }

    /**
     * Sets shipWindow
     *
     * @param \SellingPartnerApi\Model\VendorOrders\DateTimeInterval $shipWindow shipWindow
     *
     * @return $this
     */
    public function setShipWindow($shipWindow)
    {
        $this->container['shipWindow'] = $shipWindow;

        return $this;
    }

    /**
     * Gets deliveryWindow
     *
     * @return \SellingPartnerApi\Model\VendorOrders\DateTimeInterval
     */
    public function getDeliveryWindow()
    {
        return $this->container['deliveryWindow'];
    }

    /**
     * Sets deliveryWindow
     *
     * @param \SellingPartnerApi\Model\VendorOrders\DateTimeInterval $deliveryWindow deliveryWindow
     *
     * @return $this
     */
    public function setDeliveryWindow($deliveryWindow)
    {
        $this->container['deliveryWindow'] = $deliveryWindow;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \SellingPartnerApi\Model\VendorOrders\OrderItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \SellingPartnerApi\Model\VendorOrders\OrderItem[] $items A list of items in this purchase order.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
