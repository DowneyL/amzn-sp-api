<?php
/**
 * OrderAcknowledgementItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorOrders;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * OrderAcknowledgementItem Class Doc Comment
 *
 * @category Class
 * @description Details of the item being acknowledged.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderAcknowledgementItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderAcknowledgementItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'itemSequenceNumber' => 'string',
'amazonProductIdentifier' => 'string',
'vendorProductIdentifier' => 'string',
'orderedQuantity' => '\SellingPartnerApi\Model\VendorOrders\ItemQuantity',
'netCost' => '\SellingPartnerApi\Model\VendorOrders\Money',
'listPrice' => '\SellingPartnerApi\Model\VendorOrders\Money',
'discountMultiplier' => 'string',
'itemAcknowledgements' => '\SellingPartnerApi\Model\VendorOrders\OrderItemAcknowledgement[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'itemSequenceNumber' => null,
'amazonProductIdentifier' => null,
'vendorProductIdentifier' => null,
'orderedQuantity' => null,
'netCost' => null,
'listPrice' => null,
'discountMultiplier' => null,
'itemAcknowledgements' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemSequenceNumber' => 'itemSequenceNumber',
'amazonProductIdentifier' => 'amazonProductIdentifier',
'vendorProductIdentifier' => 'vendorProductIdentifier',
'orderedQuantity' => 'orderedQuantity',
'netCost' => 'netCost',
'listPrice' => 'listPrice',
'discountMultiplier' => 'discountMultiplier',
'itemAcknowledgements' => 'itemAcknowledgements'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemSequenceNumber' => 'setItemSequenceNumber',
'amazonProductIdentifier' => 'setAmazonProductIdentifier',
'vendorProductIdentifier' => 'setVendorProductIdentifier',
'orderedQuantity' => 'setOrderedQuantity',
'netCost' => 'setNetCost',
'listPrice' => 'setListPrice',
'discountMultiplier' => 'setDiscountMultiplier',
'itemAcknowledgements' => 'setItemAcknowledgements'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemSequenceNumber' => 'getItemSequenceNumber',
'amazonProductIdentifier' => 'getAmazonProductIdentifier',
'vendorProductIdentifier' => 'getVendorProductIdentifier',
'orderedQuantity' => 'getOrderedQuantity',
'netCost' => 'getNetCost',
'listPrice' => 'getListPrice',
'discountMultiplier' => 'getDiscountMultiplier',
'itemAcknowledgements' => 'getItemAcknowledgements'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemSequenceNumber'] = isset($data['itemSequenceNumber']) ? $data['itemSequenceNumber'] : null;
        $this->container['amazonProductIdentifier'] = isset($data['amazonProductIdentifier']) ? $data['amazonProductIdentifier'] : null;
        $this->container['vendorProductIdentifier'] = isset($data['vendorProductIdentifier']) ? $data['vendorProductIdentifier'] : null;
        $this->container['orderedQuantity'] = isset($data['orderedQuantity']) ? $data['orderedQuantity'] : null;
        $this->container['netCost'] = isset($data['netCost']) ? $data['netCost'] : null;
        $this->container['listPrice'] = isset($data['listPrice']) ? $data['listPrice'] : null;
        $this->container['discountMultiplier'] = isset($data['discountMultiplier']) ? $data['discountMultiplier'] : null;
        $this->container['itemAcknowledgements'] = isset($data['itemAcknowledgements']) ? $data['itemAcknowledgements'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderedQuantity'] === null) {
            $invalidProperties[] = "'orderedQuantity' can't be null";
        }
        if ($this->container['itemAcknowledgements'] === null) {
            $invalidProperties[] = "'itemAcknowledgements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itemSequenceNumber
     *
     * @return string
     */
    public function getItemSequenceNumber()
    {
        return $this->container['itemSequenceNumber'];
    }

    /**
     * Sets itemSequenceNumber
     *
     * @param string $itemSequenceNumber Line item sequence number for the item.
     *
     * @return $this
     */
    public function setItemSequenceNumber($itemSequenceNumber)
    {
        $this->container['itemSequenceNumber'] = $itemSequenceNumber;

        return $this;
    }

    /**
     * Gets amazonProductIdentifier
     *
     * @return string
     */
    public function getAmazonProductIdentifier()
    {
        return $this->container['amazonProductIdentifier'];
    }

    /**
     * Sets amazonProductIdentifier
     *
     * @param string $amazonProductIdentifier Amazon Standard Identification Number (ASIN) of an item.
     *
     * @return $this
     */
    public function setAmazonProductIdentifier($amazonProductIdentifier)
    {
        $this->container['amazonProductIdentifier'] = $amazonProductIdentifier;

        return $this;
    }

    /**
     * Gets vendorProductIdentifier
     *
     * @return string
     */
    public function getVendorProductIdentifier()
    {
        return $this->container['vendorProductIdentifier'];
    }

    /**
     * Sets vendorProductIdentifier
     *
     * @param string $vendorProductIdentifier The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
     *
     * @return $this
     */
    public function setVendorProductIdentifier($vendorProductIdentifier)
    {
        $this->container['vendorProductIdentifier'] = $vendorProductIdentifier;

        return $this;
    }

    /**
     * Gets orderedQuantity
     *
     * @return \SellingPartnerApi\Model\VendorOrders\ItemQuantity
     */
    public function getOrderedQuantity()
    {
        return $this->container['orderedQuantity'];
    }

    /**
     * Sets orderedQuantity
     *
     * @param \SellingPartnerApi\Model\VendorOrders\ItemQuantity $orderedQuantity orderedQuantity
     *
     * @return $this
     */
    public function setOrderedQuantity($orderedQuantity)
    {
        $this->container['orderedQuantity'] = $orderedQuantity;

        return $this;
    }

    /**
     * Gets netCost
     *
     * @return \SellingPartnerApi\Model\VendorOrders\Money
     */
    public function getNetCost()
    {
        return $this->container['netCost'];
    }

    /**
     * Sets netCost
     *
     * @param \SellingPartnerApi\Model\VendorOrders\Money $netCost netCost
     *
     * @return $this
     */
    public function setNetCost($netCost)
    {
        $this->container['netCost'] = $netCost;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return \SellingPartnerApi\Model\VendorOrders\Money
     */
    public function getListPrice()
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param \SellingPartnerApi\Model\VendorOrders\Money $listPrice listPrice
     *
     * @return $this
     */
    public function setListPrice($listPrice)
    {
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets discountMultiplier
     *
     * @return string
     */
    public function getDiscountMultiplier()
    {
        return $this->container['discountMultiplier'];
    }

    /**
     * Sets discountMultiplier
     *
     * @param string $discountMultiplier The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.
     *
     * @return $this
     */
    public function setDiscountMultiplier($discountMultiplier)
    {
        $this->container['discountMultiplier'] = $discountMultiplier;

        return $this;
    }

    /**
     * Gets itemAcknowledgements
     *
     * @return \SellingPartnerApi\Model\VendorOrders\OrderItemAcknowledgement[]
     */
    public function getItemAcknowledgements()
    {
        return $this->container['itemAcknowledgements'];
    }

    /**
     * Sets itemAcknowledgements
     *
     * @param \SellingPartnerApi\Model\VendorOrders\OrderItemAcknowledgement[] $itemAcknowledgements This is used to indicate acknowledged quantity.
     *
     * @return $this
     */
    public function setItemAcknowledgements($itemAcknowledgements)
    {
        $this->container['itemAcknowledgements'] = $itemAcknowledgements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
