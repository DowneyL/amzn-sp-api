<?php
/**
 * OrderItemStatusAcknowledgementStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorOrders;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * OrderItemStatusAcknowledgementStatus Class Doc Comment
 *
 * @category Class
 * @description Acknowledgement status information.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderItemStatusAcknowledgementStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderItemStatus_acknowledgementStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'confirmationStatus' => 'string',
'acceptedQuantity' => '\SellingPartnerApi\Model\VendorOrders\ItemQuantity',
'rejectedQuantity' => '\SellingPartnerApi\Model\VendorOrders\ItemQuantity',
'acknowledgementStatusDetails' => '\SellingPartnerApi\Model\VendorOrders\AcknowledgementStatusDetails[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'confirmationStatus' => null,
'acceptedQuantity' => null,
'rejectedQuantity' => null,
'acknowledgementStatusDetails' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'confirmationStatus' => 'confirmationStatus',
'acceptedQuantity' => 'acceptedQuantity',
'rejectedQuantity' => 'rejectedQuantity',
'acknowledgementStatusDetails' => 'acknowledgementStatusDetails'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'confirmationStatus' => 'setConfirmationStatus',
'acceptedQuantity' => 'setAcceptedQuantity',
'rejectedQuantity' => 'setRejectedQuantity',
'acknowledgementStatusDetails' => 'setAcknowledgementStatusDetails'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'confirmationStatus' => 'getConfirmationStatus',
'acceptedQuantity' => 'getAcceptedQuantity',
'rejectedQuantity' => 'getRejectedQuantity',
'acknowledgementStatusDetails' => 'getAcknowledgementStatusDetails'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONFIRMATION_STATUS_ACCEPTED = 'ACCEPTED';
const CONFIRMATION_STATUS_PARTIALLY_ACCEPTED = 'PARTIALLY_ACCEPTED';
const CONFIRMATION_STATUS_REJECTED = 'REJECTED';
const CONFIRMATION_STATUS_UNCONFIRMED = 'UNCONFIRMED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConfirmationStatusAllowableValues()
    {
        return [
            self::CONFIRMATION_STATUS_ACCEPTED,
self::CONFIRMATION_STATUS_PARTIALLY_ACCEPTED,
self::CONFIRMATION_STATUS_REJECTED,
self::CONFIRMATION_STATUS_UNCONFIRMED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['confirmationStatus'] = isset($data['confirmationStatus']) ? $data['confirmationStatus'] : null;
        $this->container['acceptedQuantity'] = isset($data['acceptedQuantity']) ? $data['acceptedQuantity'] : null;
        $this->container['rejectedQuantity'] = isset($data['rejectedQuantity']) ? $data['rejectedQuantity'] : null;
        $this->container['acknowledgementStatusDetails'] = isset($data['acknowledgementStatusDetails']) ? $data['acknowledgementStatusDetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getConfirmationStatusAllowableValues();
        if (!is_null($this->container['confirmationStatus']) && !in_array($this->container['confirmationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'confirmationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets confirmationStatus
     *
     * @return string
     */
    public function getConfirmationStatus()
    {
        return $this->container['confirmationStatus'];
    }

    /**
     * Sets confirmationStatus
     *
     * @param string $confirmationStatus Confirmation status of line item.
     *
     * @return $this
     */
    public function setConfirmationStatus($confirmationStatus)
    {
        $allowedValues = $this->getConfirmationStatusAllowableValues();
        if (!is_null($confirmationStatus) && !in_array($confirmationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'confirmationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['confirmationStatus'] = $confirmationStatus;

        return $this;
    }

    /**
     * Gets acceptedQuantity
     *
     * @return \SellingPartnerApi\Model\VendorOrders\ItemQuantity
     */
    public function getAcceptedQuantity()
    {
        return $this->container['acceptedQuantity'];
    }

    /**
     * Sets acceptedQuantity
     *
     * @param \SellingPartnerApi\Model\VendorOrders\ItemQuantity $acceptedQuantity acceptedQuantity
     *
     * @return $this
     */
    public function setAcceptedQuantity($acceptedQuantity)
    {
        $this->container['acceptedQuantity'] = $acceptedQuantity;

        return $this;
    }

    /**
     * Gets rejectedQuantity
     *
     * @return \SellingPartnerApi\Model\VendorOrders\ItemQuantity
     */
    public function getRejectedQuantity()
    {
        return $this->container['rejectedQuantity'];
    }

    /**
     * Sets rejectedQuantity
     *
     * @param \SellingPartnerApi\Model\VendorOrders\ItemQuantity $rejectedQuantity rejectedQuantity
     *
     * @return $this
     */
    public function setRejectedQuantity($rejectedQuantity)
    {
        $this->container['rejectedQuantity'] = $rejectedQuantity;

        return $this;
    }

    /**
     * Gets acknowledgementStatusDetails
     *
     * @return \SellingPartnerApi\Model\VendorOrders\AcknowledgementStatusDetails[]
     */
    public function getAcknowledgementStatusDetails()
    {
        return $this->container['acknowledgementStatusDetails'];
    }

    /**
     * Sets acknowledgementStatusDetails
     *
     * @param \SellingPartnerApi\Model\VendorOrders\AcknowledgementStatusDetails[] $acknowledgementStatusDetails Details of item quantity confirmed.
     *
     * @return $this
     */
    public function setAcknowledgementStatusDetails($acknowledgementStatusDetails)
    {
        $this->container['acknowledgementStatusDetails'] = $acknowledgementStatusDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
