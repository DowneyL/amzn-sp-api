<?php
/**
 * TaxDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * TaxDetail Class Doc Comment
 *
 * @category Class
 * @description Details of tax amount applied.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'taxType' => 'string',
'taxRate' => '\SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Decimal',
'taxAmount' => '\SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Money',
'taxableAmount' => '\SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Money'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'taxType' => null,
'taxRate' => null,
'taxAmount' => null,
'taxableAmount' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'taxType' => 'taxType',
'taxRate' => 'taxRate',
'taxAmount' => 'taxAmount',
'taxableAmount' => 'taxableAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'taxType' => 'setTaxType',
'taxRate' => 'setTaxRate',
'taxAmount' => 'setTaxAmount',
'taxableAmount' => 'setTaxableAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'taxType' => 'getTaxType',
'taxRate' => 'getTaxRate',
'taxAmount' => 'getTaxAmount',
'taxableAmount' => 'getTaxableAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TAX_TYPE_CGST = 'CGST';
const TAX_TYPE_SGST = 'SGST';
const TAX_TYPE_CESS = 'CESS';
const TAX_TYPE_UTGST = 'UTGST';
const TAX_TYPE_IGST = 'IGST';
const TAX_TYPE_MW_ST = 'MwSt.';
const TAX_TYPE_PST = 'PST';
const TAX_TYPE_TVA = 'TVA';
const TAX_TYPE_VAT = 'VAT';
const TAX_TYPE_GST = 'GST';
const TAX_TYPE_ST = 'ST';
const TAX_TYPE_CONSUMPTION = 'Consumption';
const TAX_TYPE_MUTUALLY_DEFINED = 'MutuallyDefined';
const TAX_TYPE_DOMESTIC_VAT = 'DomesticVAT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeAllowableValues()
    {
        return [
            self::TAX_TYPE_CGST,
self::TAX_TYPE_SGST,
self::TAX_TYPE_CESS,
self::TAX_TYPE_UTGST,
self::TAX_TYPE_IGST,
self::TAX_TYPE_MW_ST,
self::TAX_TYPE_PST,
self::TAX_TYPE_TVA,
self::TAX_TYPE_VAT,
self::TAX_TYPE_GST,
self::TAX_TYPE_ST,
self::TAX_TYPE_CONSUMPTION,
self::TAX_TYPE_MUTUALLY_DEFINED,
self::TAX_TYPE_DOMESTIC_VAT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['taxType'] = isset($data['taxType']) ? $data['taxType'] : null;
        $this->container['taxRate'] = isset($data['taxRate']) ? $data['taxRate'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['taxableAmount'] = isset($data['taxableAmount']) ? $data['taxableAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['taxType'] === null) {
            $invalidProperties[] = "'taxType' can't be null";
        }
        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($this->container['taxType']) && !in_array($this->container['taxType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'taxType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['taxAmount'] === null) {
            $invalidProperties[] = "'taxAmount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxType
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['taxType'];
    }

    /**
     * Sets taxType
     *
     * @param string $taxType Type of the tax applied.
     *
     * @return $this
     */
    public function setTaxType($taxType)
    {
        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!in_array($taxType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'taxType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['taxType'] = $taxType;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return \SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Decimal
     */
    public function getTaxRate()
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param \SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Decimal $taxRate taxRate
     *
     * @return $this
     */
    public function setTaxRate($taxRate)
    {
        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return \SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Money
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param \SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Money $taxAmount taxAmount
     *
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets taxableAmount
     *
     * @return \SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Money
     */
    public function getTaxableAmount()
    {
        return $this->container['taxableAmount'];
    }

    /**
     * Sets taxableAmount
     *
     * @param \SellingPartnerApi\Model\VendorDirectFulfillmentPaymentsV1\Money $taxableAmount taxableAmount
     *
     * @return $this
     */
    public function setTaxableAmount($taxableAmount)
    {
        $this->container['taxableAmount'] = $taxableAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
