<?php
/**
 * CreditNoteDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\VendorInvoices;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * CreditNoteDetails Class Doc Comment
 *
 * @category Class
 * @description References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditNoteDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditNoteDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'referenceInvoiceNumber' => 'string',
'debitNoteNumber' => 'string',
'returnsReferenceNumber' => 'string',
'goodsReturnDate' => '\SellingPartnerApi\Model\VendorInvoices\\DateTime',
'rmaId' => 'string',
'coopReferenceNumber' => 'string',
'consignorsReferenceNumber' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'referenceInvoiceNumber' => null,
'debitNoteNumber' => null,
'returnsReferenceNumber' => null,
'goodsReturnDate' => null,
'rmaId' => null,
'coopReferenceNumber' => null,
'consignorsReferenceNumber' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'referenceInvoiceNumber' => 'referenceInvoiceNumber',
'debitNoteNumber' => 'debitNoteNumber',
'returnsReferenceNumber' => 'returnsReferenceNumber',
'goodsReturnDate' => 'goodsReturnDate',
'rmaId' => 'rmaId',
'coopReferenceNumber' => 'coopReferenceNumber',
'consignorsReferenceNumber' => 'consignorsReferenceNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'referenceInvoiceNumber' => 'setReferenceInvoiceNumber',
'debitNoteNumber' => 'setDebitNoteNumber',
'returnsReferenceNumber' => 'setReturnsReferenceNumber',
'goodsReturnDate' => 'setGoodsReturnDate',
'rmaId' => 'setRmaId',
'coopReferenceNumber' => 'setCoopReferenceNumber',
'consignorsReferenceNumber' => 'setConsignorsReferenceNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'referenceInvoiceNumber' => 'getReferenceInvoiceNumber',
'debitNoteNumber' => 'getDebitNoteNumber',
'returnsReferenceNumber' => 'getReturnsReferenceNumber',
'goodsReturnDate' => 'getGoodsReturnDate',
'rmaId' => 'getRmaId',
'coopReferenceNumber' => 'getCoopReferenceNumber',
'consignorsReferenceNumber' => 'getConsignorsReferenceNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['referenceInvoiceNumber'] = isset($data['referenceInvoiceNumber']) ? $data['referenceInvoiceNumber'] : null;
        $this->container['debitNoteNumber'] = isset($data['debitNoteNumber']) ? $data['debitNoteNumber'] : null;
        $this->container['returnsReferenceNumber'] = isset($data['returnsReferenceNumber']) ? $data['returnsReferenceNumber'] : null;
        $this->container['goodsReturnDate'] = isset($data['goodsReturnDate']) ? $data['goodsReturnDate'] : null;
        $this->container['rmaId'] = isset($data['rmaId']) ? $data['rmaId'] : null;
        $this->container['coopReferenceNumber'] = isset($data['coopReferenceNumber']) ? $data['coopReferenceNumber'] : null;
        $this->container['consignorsReferenceNumber'] = isset($data['consignorsReferenceNumber']) ? $data['consignorsReferenceNumber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets referenceInvoiceNumber
     *
     * @return string
     */
    public function getReferenceInvoiceNumber()
    {
        return $this->container['referenceInvoiceNumber'];
    }

    /**
     * Sets referenceInvoiceNumber
     *
     * @param string $referenceInvoiceNumber Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.
     *
     * @return $this
     */
    public function setReferenceInvoiceNumber($referenceInvoiceNumber)
    {
        $this->container['referenceInvoiceNumber'] = $referenceInvoiceNumber;

        return $this;
    }

    /**
     * Gets debitNoteNumber
     *
     * @return string
     */
    public function getDebitNoteNumber()
    {
        return $this->container['debitNoteNumber'];
    }

    /**
     * Sets debitNoteNumber
     *
     * @param string $debitNoteNumber Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.
     *
     * @return $this
     */
    public function setDebitNoteNumber($debitNoteNumber)
    {
        $this->container['debitNoteNumber'] = $debitNoteNumber;

        return $this;
    }

    /**
     * Gets returnsReferenceNumber
     *
     * @return string
     */
    public function getReturnsReferenceNumber()
    {
        return $this->container['returnsReferenceNumber'];
    }

    /**
     * Sets returnsReferenceNumber
     *
     * @param string $returnsReferenceNumber Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.
     *
     * @return $this
     */
    public function setReturnsReferenceNumber($returnsReferenceNumber)
    {
        $this->container['returnsReferenceNumber'] = $returnsReferenceNumber;

        return $this;
    }

    /**
     * Gets goodsReturnDate
     *
     * @return \SellingPartnerApi\Model\VendorInvoices\\DateTime
     */
    public function getGoodsReturnDate()
    {
        return $this->container['goodsReturnDate'];
    }

    /**
     * Sets goodsReturnDate
     *
     * @param \SellingPartnerApi\Model\VendorInvoices\\DateTime $goodsReturnDate goodsReturnDate
     *
     * @return $this
     */
    public function setGoodsReturnDate($goodsReturnDate)
    {
        $this->container['goodsReturnDate'] = $goodsReturnDate;

        return $this;
    }

    /**
     * Gets rmaId
     *
     * @return string
     */
    public function getRmaId()
    {
        return $this->container['rmaId'];
    }

    /**
     * Sets rmaId
     *
     * @param string $rmaId Identifies the Returned Merchandise Authorization ID, if generated.
     *
     * @return $this
     */
    public function setRmaId($rmaId)
    {
        $this->container['rmaId'] = $rmaId;

        return $this;
    }

    /**
     * Gets coopReferenceNumber
     *
     * @return string
     */
    public function getCoopReferenceNumber()
    {
        return $this->container['coopReferenceNumber'];
    }

    /**
     * Sets coopReferenceNumber
     *
     * @param string $coopReferenceNumber Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.
     *
     * @return $this
     */
    public function setCoopReferenceNumber($coopReferenceNumber)
    {
        $this->container['coopReferenceNumber'] = $coopReferenceNumber;

        return $this;
    }

    /**
     * Gets consignorsReferenceNumber
     *
     * @return string
     */
    public function getConsignorsReferenceNumber()
    {
        return $this->container['consignorsReferenceNumber'];
    }

    /**
     * Sets consignorsReferenceNumber
     *
     * @param string $consignorsReferenceNumber Identifies the consignor reference number (VRET number), if generated by Amazon.
     *
     * @return $this
     */
    public function setConsignorsReferenceNumber($consignorsReferenceNumber)
    {
        $this->container['consignorsReferenceNumber'] = $consignorsReferenceNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
