<?php
/**
 * Shipment
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\MerchantFulfillmentV0;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @description The details of a shipment, including the shipment status.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shipment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipmentId' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\ShipmentId',
'amazonOrderId' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\AmazonOrderId',
'sellerOrderId' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\SellerOrderId',
'itemList' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\ItemList',
'shipFromAddress' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\Address',
'shipToAddress' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\Address',
'packageDimensions' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\PackageDimensions',
'weight' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\Weight',
'insurance' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\CurrencyAmount',
'shippingService' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\ShippingService',
'label' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\Label',
'status' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\ShipmentStatus',
'trackingId' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\TrackingId',
'createdDate' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\Timestamp',
'lastUpdatedDate' => '\SellingPartnerApi\Model\MerchantFulfillmentV0\Timestamp'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipmentId' => null,
'amazonOrderId' => null,
'sellerOrderId' => null,
'itemList' => null,
'shipFromAddress' => null,
'shipToAddress' => null,
'packageDimensions' => null,
'weight' => null,
'insurance' => null,
'shippingService' => null,
'label' => null,
'status' => null,
'trackingId' => null,
'createdDate' => null,
'lastUpdatedDate' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentId' => 'ShipmentId',
'amazonOrderId' => 'AmazonOrderId',
'sellerOrderId' => 'SellerOrderId',
'itemList' => 'ItemList',
'shipFromAddress' => 'ShipFromAddress',
'shipToAddress' => 'ShipToAddress',
'packageDimensions' => 'PackageDimensions',
'weight' => 'Weight',
'insurance' => 'Insurance',
'shippingService' => 'ShippingService',
'label' => 'Label',
'status' => 'Status',
'trackingId' => 'TrackingId',
'createdDate' => 'CreatedDate',
'lastUpdatedDate' => 'LastUpdatedDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentId' => 'setShipmentId',
'amazonOrderId' => 'setAmazonOrderId',
'sellerOrderId' => 'setSellerOrderId',
'itemList' => 'setItemList',
'shipFromAddress' => 'setShipFromAddress',
'shipToAddress' => 'setShipToAddress',
'packageDimensions' => 'setPackageDimensions',
'weight' => 'setWeight',
'insurance' => 'setInsurance',
'shippingService' => 'setShippingService',
'label' => 'setLabel',
'status' => 'setStatus',
'trackingId' => 'setTrackingId',
'createdDate' => 'setCreatedDate',
'lastUpdatedDate' => 'setLastUpdatedDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentId' => 'getShipmentId',
'amazonOrderId' => 'getAmazonOrderId',
'sellerOrderId' => 'getSellerOrderId',
'itemList' => 'getItemList',
'shipFromAddress' => 'getShipFromAddress',
'shipToAddress' => 'getShipToAddress',
'packageDimensions' => 'getPackageDimensions',
'weight' => 'getWeight',
'insurance' => 'getInsurance',
'shippingService' => 'getShippingService',
'label' => 'getLabel',
'status' => 'getStatus',
'trackingId' => 'getTrackingId',
'createdDate' => 'getCreatedDate',
'lastUpdatedDate' => 'getLastUpdatedDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipmentId'] = isset($data['shipmentId']) ? $data['shipmentId'] : null;
        $this->container['amazonOrderId'] = isset($data['amazonOrderId']) ? $data['amazonOrderId'] : null;
        $this->container['sellerOrderId'] = isset($data['sellerOrderId']) ? $data['sellerOrderId'] : null;
        $this->container['itemList'] = isset($data['itemList']) ? $data['itemList'] : null;
        $this->container['shipFromAddress'] = isset($data['shipFromAddress']) ? $data['shipFromAddress'] : null;
        $this->container['shipToAddress'] = isset($data['shipToAddress']) ? $data['shipToAddress'] : null;
        $this->container['packageDimensions'] = isset($data['packageDimensions']) ? $data['packageDimensions'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['shippingService'] = isset($data['shippingService']) ? $data['shippingService'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trackingId'] = isset($data['trackingId']) ? $data['trackingId'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipmentId'] === null) {
            $invalidProperties[] = "'shipmentId' can't be null";
        }
        if ($this->container['amazonOrderId'] === null) {
            $invalidProperties[] = "'amazonOrderId' can't be null";
        }
        if ($this->container['itemList'] === null) {
            $invalidProperties[] = "'itemList' can't be null";
        }
        if ($this->container['shipFromAddress'] === null) {
            $invalidProperties[] = "'shipFromAddress' can't be null";
        }
        if ($this->container['shipToAddress'] === null) {
            $invalidProperties[] = "'shipToAddress' can't be null";
        }
        if ($this->container['packageDimensions'] === null) {
            $invalidProperties[] = "'packageDimensions' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['insurance'] === null) {
            $invalidProperties[] = "'insurance' can't be null";
        }
        if ($this->container['shippingService'] === null) {
            $invalidProperties[] = "'shippingService' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['createdDate'] === null) {
            $invalidProperties[] = "'createdDate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentId
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\ShipmentId
     */
    public function getShipmentId()
    {
        return $this->container['shipmentId'];
    }

    /**
     * Sets shipmentId
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\ShipmentId $shipmentId shipmentId
     *
     * @return $this
     */
    public function setShipmentId($shipmentId)
    {
        $this->container['shipmentId'] = $shipmentId;

        return $this;
    }

    /**
     * Gets amazonOrderId
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\AmazonOrderId
     */
    public function getAmazonOrderId()
    {
        return $this->container['amazonOrderId'];
    }

    /**
     * Sets amazonOrderId
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\AmazonOrderId $amazonOrderId amazonOrderId
     *
     * @return $this
     */
    public function setAmazonOrderId($amazonOrderId)
    {
        $this->container['amazonOrderId'] = $amazonOrderId;

        return $this;
    }

    /**
     * Gets sellerOrderId
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\SellerOrderId
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\SellerOrderId $sellerOrderId sellerOrderId
     *
     * @return $this
     */
    public function setSellerOrderId($sellerOrderId)
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets itemList
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\ItemList
     */
    public function getItemList()
    {
        return $this->container['itemList'];
    }

    /**
     * Sets itemList
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\ItemList $itemList itemList
     *
     * @return $this
     */
    public function setItemList($itemList)
    {
        $this->container['itemList'] = $itemList;

        return $this;
    }

    /**
     * Gets shipFromAddress
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\Address
     */
    public function getShipFromAddress()
    {
        return $this->container['shipFromAddress'];
    }

    /**
     * Sets shipFromAddress
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\Address $shipFromAddress shipFromAddress
     *
     * @return $this
     */
    public function setShipFromAddress($shipFromAddress)
    {
        $this->container['shipFromAddress'] = $shipFromAddress;

        return $this;
    }

    /**
     * Gets shipToAddress
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\Address
     */
    public function getShipToAddress()
    {
        return $this->container['shipToAddress'];
    }

    /**
     * Sets shipToAddress
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\Address $shipToAddress shipToAddress
     *
     * @return $this
     */
    public function setShipToAddress($shipToAddress)
    {
        $this->container['shipToAddress'] = $shipToAddress;

        return $this;
    }

    /**
     * Gets packageDimensions
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\PackageDimensions
     */
    public function getPackageDimensions()
    {
        return $this->container['packageDimensions'];
    }

    /**
     * Sets packageDimensions
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\PackageDimensions $packageDimensions packageDimensions
     *
     * @return $this
     */
    public function setPackageDimensions($packageDimensions)
    {
        $this->container['packageDimensions'] = $packageDimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\Weight $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\CurrencyAmount
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\CurrencyAmount $insurance insurance
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets shippingService
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\ShippingService
     */
    public function getShippingService()
    {
        return $this->container['shippingService'];
    }

    /**
     * Sets shippingService
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\ShippingService $shippingService shippingService
     *
     * @return $this
     */
    public function setShippingService($shippingService)
    {
        $this->container['shippingService'] = $shippingService;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\Label
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\Label $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\ShipmentStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\ShipmentStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trackingId
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\TrackingId
     */
    public function getTrackingId()
    {
        return $this->container['trackingId'];
    }

    /**
     * Sets trackingId
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\TrackingId $trackingId trackingId
     *
     * @return $this
     */
    public function setTrackingId($trackingId)
    {
        $this->container['trackingId'] = $trackingId;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\Timestamp
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\Timestamp $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \SellingPartnerApi\Model\MerchantFulfillmentV0\Timestamp
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \SellingPartnerApi\Model\MerchantFulfillmentV0\Timestamp $lastUpdatedDate lastUpdatedDate
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
