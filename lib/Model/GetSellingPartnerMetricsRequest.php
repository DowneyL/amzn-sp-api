<?php
/**
 * GetSellingPartnerMetricsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery (automatic or manual) of any replenishable item at a frequency chosen by the customer.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * GetSellingPartnerMetricsRequest Class Doc Comment
 *
 * @category Class
 * @description The request body for the &#x60;getSellingPartnerMetrics&#x60; operation.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetSellingPartnerMetricsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetSellingPartnerMetricsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregation_frequency' => '\SellingPartnerApi\Model\AggregationFrequency',
        'time_interval' => '\SellingPartnerApi\Model\TimeInterval',
        'metrics' => '\SellingPartnerApi\Model\Metric[]',
        'time_period_type' => '\SellingPartnerApi\Model\TimePeriodType',
        'marketplace_id' => '\SellingPartnerApi\Model\MarketplaceId',
        'program_types' => '\SellingPartnerApi\Model\ProgramTypes'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregation_frequency' => null,
        'time_interval' => null,
        'metrics' => null,
        'time_period_type' => null,
        'marketplace_id' => null,
        'program_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregation_frequency' => 'aggregationFrequency',
        'time_interval' => 'timeInterval',
        'metrics' => 'metrics',
        'time_period_type' => 'timePeriodType',
        'marketplace_id' => 'marketplaceId',
        'program_types' => 'programTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregation_frequency' => 'setAggregationFrequency',
        'time_interval' => 'setTimeInterval',
        'metrics' => 'setMetrics',
        'time_period_type' => 'setTimePeriodType',
        'marketplace_id' => 'setMarketplaceId',
        'program_types' => 'setProgramTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregation_frequency' => 'getAggregationFrequency',
        'time_interval' => 'getTimeInterval',
        'metrics' => 'getMetrics',
        'time_period_type' => 'getTimePeriodType',
        'marketplace_id' => 'getMarketplaceId',
        'program_types' => 'getProgramTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregation_frequency'] = isset($data['aggregation_frequency']) ? $data['aggregation_frequency'] : null;
        $this->container['time_interval'] = isset($data['time_interval']) ? $data['time_interval'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['time_period_type'] = isset($data['time_period_type']) ? $data['time_period_type'] : null;
        $this->container['marketplace_id'] = isset($data['marketplace_id']) ? $data['marketplace_id'] : null;
        $this->container['program_types'] = isset($data['program_types']) ? $data['program_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time_interval'] === null) {
            $invalidProperties[] = "'time_interval' can't be null";
        }
        if ($this->container['time_period_type'] === null) {
            $invalidProperties[] = "'time_period_type' can't be null";
        }
        if ($this->container['marketplace_id'] === null) {
            $invalidProperties[] = "'marketplace_id' can't be null";
        }
        if ($this->container['program_types'] === null) {
            $invalidProperties[] = "'program_types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregation_frequency
     *
     * @return \SellingPartnerApi\Model\AggregationFrequency
     */
    public function getAggregationFrequency()
    {
        return $this->container['aggregation_frequency'];
    }

    /**
     * Sets aggregation_frequency
     *
     * @param \SellingPartnerApi\Model\AggregationFrequency $aggregation_frequency aggregation_frequency
     *
     * @return $this
     */
    public function setAggregationFrequency($aggregation_frequency)
    {
        $this->container['aggregation_frequency'] = $aggregation_frequency;

        return $this;
    }

    /**
     * Gets time_interval
     *
     * @return \SellingPartnerApi\Model\TimeInterval
     */
    public function getTimeInterval()
    {
        return $this->container['time_interval'];
    }

    /**
     * Sets time_interval
     *
     * @param \SellingPartnerApi\Model\TimeInterval $time_interval A time interval used to compute metrics.
     *
     * @return $this
     */
    public function setTimeInterval($time_interval)
    {
        $this->container['time_interval'] = $time_interval;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \SellingPartnerApi\Model\Metric[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \SellingPartnerApi\Model\Metric[] $metrics The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned.
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets time_period_type
     *
     * @return \SellingPartnerApi\Model\TimePeriodType
     */
    public function getTimePeriodType()
    {
        return $this->container['time_period_type'];
    }

    /**
     * Sets time_period_type
     *
     * @param \SellingPartnerApi\Model\TimePeriodType $time_period_type time_period_type
     *
     * @return $this
     */
    public function setTimePeriodType($time_period_type)
    {
        $this->container['time_period_type'] = $time_period_type;

        return $this;
    }

    /**
     * Gets marketplace_id
     *
     * @return \SellingPartnerApi\Model\MarketplaceId
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param \SellingPartnerApi\Model\MarketplaceId $marketplace_id The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets program_types
     *
     * @return \SellingPartnerApi\Model\ProgramTypes
     */
    public function getProgramTypes()
    {
        return $this->container['program_types'];
    }

    /**
     * Sets program_types
     *
     * @param \SellingPartnerApi\Model\ProgramTypes $program_types The list of replenishment program types for which to return metrics.
     *
     * @return $this
     */
    public function setProgramTypes($program_types)
    {
        $this->container['program_types'] = $program_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


