<?php
/**
 * ItemSummaryByMarketplace
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\CatalogItems20220401;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ItemSummaryByMarketplace Class Doc Comment
 *
 * @category Class
 * @description Summary details of an Amazon catalog item for the indicated Amazon marketplace.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemSummaryByMarketplace implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemSummaryByMarketplace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplaceId' => 'string',
'adultProduct' => 'bool',
'autographed' => 'bool',
'brand' => 'string',
'browseClassification' => '\SellingPartnerApi\Model\CatalogItems20220401\ItemBrowseClassification',
'color' => 'string',
'contributors' => '\SellingPartnerApi\Model\CatalogItems20220401\ItemContributor[]',
'itemClassification' => 'string',
'itemName' => 'string',
'manufacturer' => 'string',
'memorabilia' => 'bool',
'modelNumber' => 'string',
'packageQuantity' => 'int',
'partNumber' => 'string',
'releaseDate' => '\DateTime',
'size' => 'string',
'style' => 'string',
'tradeInEligible' => 'bool',
'websiteDisplayGroup' => 'string',
'websiteDisplayGroupName' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplaceId' => null,
'adultProduct' => null,
'autographed' => null,
'brand' => null,
'browseClassification' => null,
'color' => null,
'contributors' => null,
'itemClassification' => null,
'itemName' => null,
'manufacturer' => null,
'memorabilia' => null,
'modelNumber' => null,
'packageQuantity' => null,
'partNumber' => null,
'releaseDate' => 'date',
'size' => null,
'style' => null,
'tradeInEligible' => null,
'websiteDisplayGroup' => null,
'websiteDisplayGroupName' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplaceId' => 'marketplaceId',
'adultProduct' => 'adultProduct',
'autographed' => 'autographed',
'brand' => 'brand',
'browseClassification' => 'browseClassification',
'color' => 'color',
'contributors' => 'contributors',
'itemClassification' => 'itemClassification',
'itemName' => 'itemName',
'manufacturer' => 'manufacturer',
'memorabilia' => 'memorabilia',
'modelNumber' => 'modelNumber',
'packageQuantity' => 'packageQuantity',
'partNumber' => 'partNumber',
'releaseDate' => 'releaseDate',
'size' => 'size',
'style' => 'style',
'tradeInEligible' => 'tradeInEligible',
'websiteDisplayGroup' => 'websiteDisplayGroup',
'websiteDisplayGroupName' => 'websiteDisplayGroupName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplaceId' => 'setMarketplaceId',
'adultProduct' => 'setAdultProduct',
'autographed' => 'setAutographed',
'brand' => 'setBrand',
'browseClassification' => 'setBrowseClassification',
'color' => 'setColor',
'contributors' => 'setContributors',
'itemClassification' => 'setItemClassification',
'itemName' => 'setItemName',
'manufacturer' => 'setManufacturer',
'memorabilia' => 'setMemorabilia',
'modelNumber' => 'setModelNumber',
'packageQuantity' => 'setPackageQuantity',
'partNumber' => 'setPartNumber',
'releaseDate' => 'setReleaseDate',
'size' => 'setSize',
'style' => 'setStyle',
'tradeInEligible' => 'setTradeInEligible',
'websiteDisplayGroup' => 'setWebsiteDisplayGroup',
'websiteDisplayGroupName' => 'setWebsiteDisplayGroupName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplaceId' => 'getMarketplaceId',
'adultProduct' => 'getAdultProduct',
'autographed' => 'getAutographed',
'brand' => 'getBrand',
'browseClassification' => 'getBrowseClassification',
'color' => 'getColor',
'contributors' => 'getContributors',
'itemClassification' => 'getItemClassification',
'itemName' => 'getItemName',
'manufacturer' => 'getManufacturer',
'memorabilia' => 'getMemorabilia',
'modelNumber' => 'getModelNumber',
'packageQuantity' => 'getPackageQuantity',
'partNumber' => 'getPartNumber',
'releaseDate' => 'getReleaseDate',
'size' => 'getSize',
'style' => 'getStyle',
'tradeInEligible' => 'getTradeInEligible',
'websiteDisplayGroup' => 'getWebsiteDisplayGroup',
'websiteDisplayGroupName' => 'getWebsiteDisplayGroupName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ITEM_CLASSIFICATION_BASE_PRODUCT = 'BASE_PRODUCT';
const ITEM_CLASSIFICATION_OTHER = 'OTHER';
const ITEM_CLASSIFICATION_PRODUCT_BUNDLE = 'PRODUCT_BUNDLE';
const ITEM_CLASSIFICATION_VARIATION_PARENT = 'VARIATION_PARENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemClassificationAllowableValues()
    {
        return [
            self::ITEM_CLASSIFICATION_BASE_PRODUCT,
self::ITEM_CLASSIFICATION_OTHER,
self::ITEM_CLASSIFICATION_PRODUCT_BUNDLE,
self::ITEM_CLASSIFICATION_VARIATION_PARENT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['adultProduct'] = isset($data['adultProduct']) ? $data['adultProduct'] : null;
        $this->container['autographed'] = isset($data['autographed']) ? $data['autographed'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['browseClassification'] = isset($data['browseClassification']) ? $data['browseClassification'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['contributors'] = isset($data['contributors']) ? $data['contributors'] : null;
        $this->container['itemClassification'] = isset($data['itemClassification']) ? $data['itemClassification'] : null;
        $this->container['itemName'] = isset($data['itemName']) ? $data['itemName'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['memorabilia'] = isset($data['memorabilia']) ? $data['memorabilia'] : null;
        $this->container['modelNumber'] = isset($data['modelNumber']) ? $data['modelNumber'] : null;
        $this->container['packageQuantity'] = isset($data['packageQuantity']) ? $data['packageQuantity'] : null;
        $this->container['partNumber'] = isset($data['partNumber']) ? $data['partNumber'] : null;
        $this->container['releaseDate'] = isset($data['releaseDate']) ? $data['releaseDate'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['tradeInEligible'] = isset($data['tradeInEligible']) ? $data['tradeInEligible'] : null;
        $this->container['websiteDisplayGroup'] = isset($data['websiteDisplayGroup']) ? $data['websiteDisplayGroup'] : null;
        $this->container['websiteDisplayGroupName'] = isset($data['websiteDisplayGroupName']) ? $data['websiteDisplayGroupName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        $allowedValues = $this->getItemClassificationAllowableValues();
        if (!is_null($this->container['itemClassification']) && !in_array($this->container['itemClassification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'itemClassification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string $marketplaceId Amazon marketplace identifier.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets adultProduct
     *
     * @return bool
     */
    public function getAdultProduct()
    {
        return $this->container['adultProduct'];
    }

    /**
     * Sets adultProduct
     *
     * @param bool $adultProduct Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.
     *
     * @return $this
     */
    public function setAdultProduct($adultProduct)
    {
        $this->container['adultProduct'] = $adultProduct;

        return $this;
    }

    /**
     * Gets autographed
     *
     * @return bool
     */
    public function getAutographed()
    {
        return $this->container['autographed'];
    }

    /**
     * Sets autographed
     *
     * @param bool $autographed Identifies an Amazon catalog item is autographed by a player or celebrity.
     *
     * @return $this
     */
    public function setAutographed($autographed)
    {
        $this->container['autographed'] = $autographed;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand Name of the brand associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets browseClassification
     *
     * @return \SellingPartnerApi\Model\CatalogItems20220401\ItemBrowseClassification
     */
    public function getBrowseClassification()
    {
        return $this->container['browseClassification'];
    }

    /**
     * Sets browseClassification
     *
     * @param \SellingPartnerApi\Model\CatalogItems20220401\ItemBrowseClassification $browseClassification browseClassification
     *
     * @return $this
     */
    public function setBrowseClassification($browseClassification)
    {
        $this->container['browseClassification'] = $browseClassification;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color Name of the color associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets contributors
     *
     * @return \SellingPartnerApi\Model\CatalogItems20220401\ItemContributor[]
     */
    public function getContributors()
    {
        return $this->container['contributors'];
    }

    /**
     * Sets contributors
     *
     * @param \SellingPartnerApi\Model\CatalogItems20220401\ItemContributor[] $contributors Individual contributors to the creation of an item, such as the authors or actors.
     *
     * @return $this
     */
    public function setContributors($contributors)
    {
        $this->container['contributors'] = $contributors;

        return $this;
    }

    /**
     * Gets itemClassification
     *
     * @return string
     */
    public function getItemClassification()
    {
        return $this->container['itemClassification'];
    }

    /**
     * Sets itemClassification
     *
     * @param string $itemClassification Classification type associated with the Amazon catalog item.
     *
     * @return $this
     */
    public function setItemClassification($itemClassification)
    {
        $allowedValues = $this->getItemClassificationAllowableValues();
        if (!is_null($itemClassification) && !in_array($itemClassification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'itemClassification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['itemClassification'] = $itemClassification;

        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->container['itemName'];
    }

    /**
     * Sets itemName
     *
     * @param string $itemName Name, or title, associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setItemName($itemName)
    {
        $this->container['itemName'] = $itemName;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer Name of the manufacturer associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets memorabilia
     *
     * @return bool
     */
    public function getMemorabilia()
    {
        return $this->container['memorabilia'];
    }

    /**
     * Sets memorabilia
     *
     * @param bool $memorabilia Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.
     *
     * @return $this
     */
    public function setMemorabilia($memorabilia)
    {
        $this->container['memorabilia'] = $memorabilia;

        return $this;
    }

    /**
     * Gets modelNumber
     *
     * @return string
     */
    public function getModelNumber()
    {
        return $this->container['modelNumber'];
    }

    /**
     * Sets modelNumber
     *
     * @param string $modelNumber Model number associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setModelNumber($modelNumber)
    {
        $this->container['modelNumber'] = $modelNumber;

        return $this;
    }

    /**
     * Gets packageQuantity
     *
     * @return int
     */
    public function getPackageQuantity()
    {
        return $this->container['packageQuantity'];
    }

    /**
     * Sets packageQuantity
     *
     * @param int $packageQuantity Quantity of an Amazon catalog item in one package.
     *
     * @return $this
     */
    public function setPackageQuantity($packageQuantity)
    {
        $this->container['packageQuantity'] = $packageQuantity;

        return $this;
    }

    /**
     * Gets partNumber
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['partNumber'];
    }

    /**
     * Sets partNumber
     *
     * @param string $partNumber Part number associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setPartNumber($partNumber)
    {
        $this->container['partNumber'] = $partNumber;

        return $this;
    }

    /**
     * Gets releaseDate
     *
     * @return \DateTime
     */
    public function getReleaseDate()
    {
        return $this->container['releaseDate'];
    }

    /**
     * Sets releaseDate
     *
     * @param \DateTime $releaseDate First date on which an Amazon catalog item is shippable to customers.
     *
     * @return $this
     */
    public function setReleaseDate($releaseDate)
    {
        $this->container['releaseDate'] = $releaseDate;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size Name of the size associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string $style Name of the style associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets tradeInEligible
     *
     * @return bool
     */
    public function getTradeInEligible()
    {
        return $this->container['tradeInEligible'];
    }

    /**
     * Sets tradeInEligible
     *
     * @param bool $tradeInEligible Identifies an Amazon catalog item is eligible for trade-in.
     *
     * @return $this
     */
    public function setTradeInEligible($tradeInEligible)
    {
        $this->container['tradeInEligible'] = $tradeInEligible;

        return $this;
    }

    /**
     * Gets websiteDisplayGroup
     *
     * @return string
     */
    public function getWebsiteDisplayGroup()
    {
        return $this->container['websiteDisplayGroup'];
    }

    /**
     * Sets websiteDisplayGroup
     *
     * @param string $websiteDisplayGroup Identifier of the website display group associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setWebsiteDisplayGroup($websiteDisplayGroup)
    {
        $this->container['websiteDisplayGroup'] = $websiteDisplayGroup;

        return $this;
    }

    /**
     * Gets websiteDisplayGroupName
     *
     * @return string
     */
    public function getWebsiteDisplayGroupName()
    {
        return $this->container['websiteDisplayGroupName'];
    }

    /**
     * Sets websiteDisplayGroupName
     *
     * @param string $websiteDisplayGroupName Display name of the website display group associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setWebsiteDisplayGroupName($websiteDisplayGroupName)
    {
        $this->container['websiteDisplayGroupName'] = $websiteDisplayGroupName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
