<?php
/**
 * ItemVendorDetailsByMarketplace
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\CatalogItems20220401;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ItemVendorDetailsByMarketplace Class Doc Comment
 *
 * @category Class
 * @description Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemVendorDetailsByMarketplace implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemVendorDetailsByMarketplace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplaceId' => 'string',
'brandCode' => 'string',
'manufacturerCode' => 'string',
'manufacturerCodeParent' => 'string',
'productCategory' => '\SellingPartnerApi\Model\CatalogItems20220401\ItemVendorDetailsCategory',
'productGroup' => 'string',
'productSubcategory' => '\SellingPartnerApi\Model\CatalogItems20220401\ItemVendorDetailsCategory',
'replenishmentCategory' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplaceId' => null,
'brandCode' => null,
'manufacturerCode' => null,
'manufacturerCodeParent' => null,
'productCategory' => null,
'productGroup' => null,
'productSubcategory' => null,
'replenishmentCategory' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplaceId' => 'marketplaceId',
'brandCode' => 'brandCode',
'manufacturerCode' => 'manufacturerCode',
'manufacturerCodeParent' => 'manufacturerCodeParent',
'productCategory' => 'productCategory',
'productGroup' => 'productGroup',
'productSubcategory' => 'productSubcategory',
'replenishmentCategory' => 'replenishmentCategory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplaceId' => 'setMarketplaceId',
'brandCode' => 'setBrandCode',
'manufacturerCode' => 'setManufacturerCode',
'manufacturerCodeParent' => 'setManufacturerCodeParent',
'productCategory' => 'setProductCategory',
'productGroup' => 'setProductGroup',
'productSubcategory' => 'setProductSubcategory',
'replenishmentCategory' => 'setReplenishmentCategory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplaceId' => 'getMarketplaceId',
'brandCode' => 'getBrandCode',
'manufacturerCode' => 'getManufacturerCode',
'manufacturerCodeParent' => 'getManufacturerCodeParent',
'productCategory' => 'getProductCategory',
'productGroup' => 'getProductGroup',
'productSubcategory' => 'getProductSubcategory',
'replenishmentCategory' => 'getReplenishmentCategory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REPLENISHMENT_CATEGORY_ALLOCATED = 'ALLOCATED';
const REPLENISHMENT_CATEGORY_BASIC_REPLENISHMENT = 'BASIC_REPLENISHMENT';
const REPLENISHMENT_CATEGORY_IN_SEASON = 'IN_SEASON';
const REPLENISHMENT_CATEGORY_LIMITED_REPLENISHMENT = 'LIMITED_REPLENISHMENT';
const REPLENISHMENT_CATEGORY_MANUFACTURER_OUT_OF_STOCK = 'MANUFACTURER_OUT_OF_STOCK';
const REPLENISHMENT_CATEGORY_NEW_PRODUCT = 'NEW_PRODUCT';
const REPLENISHMENT_CATEGORY_NON_REPLENISHABLE = 'NON_REPLENISHABLE';
const REPLENISHMENT_CATEGORY_NON_STOCKUPABLE = 'NON_STOCKUPABLE';
const REPLENISHMENT_CATEGORY_OBSOLETE = 'OBSOLETE';
const REPLENISHMENT_CATEGORY_PLANNED_REPLENISHMENT = 'PLANNED_REPLENISHMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReplenishmentCategoryAllowableValues()
    {
        return [
            self::REPLENISHMENT_CATEGORY_ALLOCATED,
self::REPLENISHMENT_CATEGORY_BASIC_REPLENISHMENT,
self::REPLENISHMENT_CATEGORY_IN_SEASON,
self::REPLENISHMENT_CATEGORY_LIMITED_REPLENISHMENT,
self::REPLENISHMENT_CATEGORY_MANUFACTURER_OUT_OF_STOCK,
self::REPLENISHMENT_CATEGORY_NEW_PRODUCT,
self::REPLENISHMENT_CATEGORY_NON_REPLENISHABLE,
self::REPLENISHMENT_CATEGORY_NON_STOCKUPABLE,
self::REPLENISHMENT_CATEGORY_OBSOLETE,
self::REPLENISHMENT_CATEGORY_PLANNED_REPLENISHMENT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['brandCode'] = isset($data['brandCode']) ? $data['brandCode'] : null;
        $this->container['manufacturerCode'] = isset($data['manufacturerCode']) ? $data['manufacturerCode'] : null;
        $this->container['manufacturerCodeParent'] = isset($data['manufacturerCodeParent']) ? $data['manufacturerCodeParent'] : null;
        $this->container['productCategory'] = isset($data['productCategory']) ? $data['productCategory'] : null;
        $this->container['productGroup'] = isset($data['productGroup']) ? $data['productGroup'] : null;
        $this->container['productSubcategory'] = isset($data['productSubcategory']) ? $data['productSubcategory'] : null;
        $this->container['replenishmentCategory'] = isset($data['replenishmentCategory']) ? $data['replenishmentCategory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        $allowedValues = $this->getReplenishmentCategoryAllowableValues();
        if (!is_null($this->container['replenishmentCategory']) && !in_array($this->container['replenishmentCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'replenishmentCategory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string $marketplaceId Amazon marketplace identifier.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets brandCode
     *
     * @return string
     */
    public function getBrandCode()
    {
        return $this->container['brandCode'];
    }

    /**
     * Sets brandCode
     *
     * @param string $brandCode Brand code associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setBrandCode($brandCode)
    {
        $this->container['brandCode'] = $brandCode;

        return $this;
    }

    /**
     * Gets manufacturerCode
     *
     * @return string
     */
    public function getManufacturerCode()
    {
        return $this->container['manufacturerCode'];
    }

    /**
     * Sets manufacturerCode
     *
     * @param string $manufacturerCode Manufacturer code associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setManufacturerCode($manufacturerCode)
    {
        $this->container['manufacturerCode'] = $manufacturerCode;

        return $this;
    }

    /**
     * Gets manufacturerCodeParent
     *
     * @return string
     */
    public function getManufacturerCodeParent()
    {
        return $this->container['manufacturerCodeParent'];
    }

    /**
     * Sets manufacturerCodeParent
     *
     * @param string $manufacturerCodeParent Parent vendor code of the manufacturer code.
     *
     * @return $this
     */
    public function setManufacturerCodeParent($manufacturerCodeParent)
    {
        $this->container['manufacturerCodeParent'] = $manufacturerCodeParent;

        return $this;
    }

    /**
     * Gets productCategory
     *
     * @return \SellingPartnerApi\Model\CatalogItems20220401\ItemVendorDetailsCategory
     */
    public function getProductCategory()
    {
        return $this->container['productCategory'];
    }

    /**
     * Sets productCategory
     *
     * @param \SellingPartnerApi\Model\CatalogItems20220401\ItemVendorDetailsCategory $productCategory productCategory
     *
     * @return $this
     */
    public function setProductCategory($productCategory)
    {
        $this->container['productCategory'] = $productCategory;

        return $this;
    }

    /**
     * Gets productGroup
     *
     * @return string
     */
    public function getProductGroup()
    {
        return $this->container['productGroup'];
    }

    /**
     * Sets productGroup
     *
     * @param string $productGroup Product group associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setProductGroup($productGroup)
    {
        $this->container['productGroup'] = $productGroup;

        return $this;
    }

    /**
     * Gets productSubcategory
     *
     * @return \SellingPartnerApi\Model\CatalogItems20220401\ItemVendorDetailsCategory
     */
    public function getProductSubcategory()
    {
        return $this->container['productSubcategory'];
    }

    /**
     * Sets productSubcategory
     *
     * @param \SellingPartnerApi\Model\CatalogItems20220401\ItemVendorDetailsCategory $productSubcategory productSubcategory
     *
     * @return $this
     */
    public function setProductSubcategory($productSubcategory)
    {
        $this->container['productSubcategory'] = $productSubcategory;

        return $this;
    }

    /**
     * Gets replenishmentCategory
     *
     * @return string
     */
    public function getReplenishmentCategory()
    {
        return $this->container['replenishmentCategory'];
    }

    /**
     * Sets replenishmentCategory
     *
     * @param string $replenishmentCategory Replenishment category associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setReplenishmentCategory($replenishmentCategory)
    {
        $allowedValues = $this->getReplenishmentCategoryAllowableValues();
        if (!is_null($replenishmentCategory) && !in_array($replenishmentCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'replenishmentCategory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['replenishmentCategory'] = $replenishmentCategory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
