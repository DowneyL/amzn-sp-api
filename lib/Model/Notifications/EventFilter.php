<?php
/**
 * EventFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, see the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\Notifications;
use \SellingPartnerApi\ObjectSerializer;

/**
 * EventFilter Class Doc Comment
 *
 * @category Class
 * @description A notificationType specific filter. This object contains all of the currently available filters and properties that you can use to define a notificationType specific filter.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventFilter extends AggregationFilter 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplaceIds' => '\SellingPartnerApi\Model\Notifications\MarketplaceIds',
'orderChangeTypes' => '\SellingPartnerApi\Model\Notifications\OrderChangeTypes',
'eventFilterType' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplaceIds' => null,
'orderChangeTypes' => null,
'eventFilterType' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplaceIds' => 'marketplaceIds',
'orderChangeTypes' => 'orderChangeTypes',
'eventFilterType' => 'eventFilterType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplaceIds' => 'setMarketplaceIds',
'orderChangeTypes' => 'setOrderChangeTypes',
'eventFilterType' => 'setEventFilterType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplaceIds' => 'getMarketplaceIds',
'orderChangeTypes' => 'getOrderChangeTypes',
'eventFilterType' => 'getEventFilterType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_FILTER_TYPE_ANY_OFFER_CHANGED = 'ANY_OFFER_CHANGED';
const EVENT_FILTER_TYPE_ORDER_CHANGE = 'ORDER_CHANGE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventFilterTypeAllowableValues()
    {
        return [
            self::EVENT_FILTER_TYPE_ANY_OFFER_CHANGED,
self::EVENT_FILTER_TYPE_ORDER_CHANGE,        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['marketplaceIds'] = isset($data['marketplaceIds']) ? $data['marketplaceIds'] : null;
        $this->container['orderChangeTypes'] = isset($data['orderChangeTypes']) ? $data['orderChangeTypes'] : null;
        $this->container['eventFilterType'] = isset($data['eventFilterType']) ? $data['eventFilterType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['eventFilterType'] === null) {
            $invalidProperties[] = "'eventFilterType' can't be null";
        }
        $allowedValues = $this->getEventFilterTypeAllowableValues();
        if (!is_null($this->container['eventFilterType']) && !in_array($this->container['eventFilterType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'eventFilterType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplaceIds
     *
     * @return \SellingPartnerApi\Model\Notifications\MarketplaceIds
     */
    public function getMarketplaceIds()
    {
        return $this->container['marketplaceIds'];
    }

    /**
     * Sets marketplaceIds
     *
     * @param \SellingPartnerApi\Model\Notifications\MarketplaceIds $marketplaceIds marketplaceIds
     *
     * @return $this
     */
    public function setMarketplaceIds($marketplaceIds)
    {
        $this->container['marketplaceIds'] = $marketplaceIds;

        return $this;
    }

    /**
     * Gets orderChangeTypes
     *
     * @return \SellingPartnerApi\Model\Notifications\OrderChangeTypes
     */
    public function getOrderChangeTypes()
    {
        return $this->container['orderChangeTypes'];
    }

    /**
     * Sets orderChangeTypes
     *
     * @param \SellingPartnerApi\Model\Notifications\OrderChangeTypes $orderChangeTypes orderChangeTypes
     *
     * @return $this
     */
    public function setOrderChangeTypes($orderChangeTypes)
    {
        $this->container['orderChangeTypes'] = $orderChangeTypes;

        return $this;
    }

    /**
     * Gets eventFilterType
     *
     * @return string
     */
    public function getEventFilterType()
    {
        return $this->container['eventFilterType'];
    }

    /**
     * Sets eventFilterType
     *
     * @param string $eventFilterType An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.
     *
     * @return $this
     */
    public function setEventFilterType($eventFilterType)
    {
        $allowedValues = $this->getEventFilterTypeAllowableValues();
        if (!in_array($eventFilterType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eventFilterType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eventFilterType'] = $eventFilterType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
