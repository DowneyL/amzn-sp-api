<?php
/**
 * CreateInboundShipmentPlanRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\FulfillmentInboundV0;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * CreateInboundShipmentPlanRequest Class Doc Comment
 *
 * @category Class
 * @description The request schema for the createInboundShipmentPlan operation.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateInboundShipmentPlanRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateInboundShipmentPlanRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipFromAddress' => '\SellingPartnerApi\Model\FulfillmentInboundV0\Address',
'labelPrepPreference' => '\SellingPartnerApi\Model\FulfillmentInboundV0\LabelPrepPreference',
'shipToCountryCode' => 'string',
'shipToCountrySubdivisionCode' => 'string',
'inboundShipmentPlanRequestItems' => '\SellingPartnerApi\Model\FulfillmentInboundV0\InboundShipmentPlanRequestItemList'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipFromAddress' => null,
'labelPrepPreference' => null,
'shipToCountryCode' => null,
'shipToCountrySubdivisionCode' => null,
'inboundShipmentPlanRequestItems' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipFromAddress' => 'ShipFromAddress',
'labelPrepPreference' => 'LabelPrepPreference',
'shipToCountryCode' => 'ShipToCountryCode',
'shipToCountrySubdivisionCode' => 'ShipToCountrySubdivisionCode',
'inboundShipmentPlanRequestItems' => 'InboundShipmentPlanRequestItems'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipFromAddress' => 'setShipFromAddress',
'labelPrepPreference' => 'setLabelPrepPreference',
'shipToCountryCode' => 'setShipToCountryCode',
'shipToCountrySubdivisionCode' => 'setShipToCountrySubdivisionCode',
'inboundShipmentPlanRequestItems' => 'setInboundShipmentPlanRequestItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipFromAddress' => 'getShipFromAddress',
'labelPrepPreference' => 'getLabelPrepPreference',
'shipToCountryCode' => 'getShipToCountryCode',
'shipToCountrySubdivisionCode' => 'getShipToCountrySubdivisionCode',
'inboundShipmentPlanRequestItems' => 'getInboundShipmentPlanRequestItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipFromAddress'] = isset($data['shipFromAddress']) ? $data['shipFromAddress'] : null;
        $this->container['labelPrepPreference'] = isset($data['labelPrepPreference']) ? $data['labelPrepPreference'] : null;
        $this->container['shipToCountryCode'] = isset($data['shipToCountryCode']) ? $data['shipToCountryCode'] : null;
        $this->container['shipToCountrySubdivisionCode'] = isset($data['shipToCountrySubdivisionCode']) ? $data['shipToCountrySubdivisionCode'] : null;
        $this->container['inboundShipmentPlanRequestItems'] = isset($data['inboundShipmentPlanRequestItems']) ? $data['inboundShipmentPlanRequestItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipFromAddress'] === null) {
            $invalidProperties[] = "'shipFromAddress' can't be null";
        }
        if ($this->container['labelPrepPreference'] === null) {
            $invalidProperties[] = "'labelPrepPreference' can't be null";
        }
        if ($this->container['inboundShipmentPlanRequestItems'] === null) {
            $invalidProperties[] = "'inboundShipmentPlanRequestItems' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipFromAddress
     *
     * @return \SellingPartnerApi\Model\FulfillmentInboundV0\Address
     */
    public function getShipFromAddress()
    {
        return $this->container['shipFromAddress'];
    }

    /**
     * Sets shipFromAddress
     *
     * @param \SellingPartnerApi\Model\FulfillmentInboundV0\Address $shipFromAddress shipFromAddress
     *
     * @return $this
     */
    public function setShipFromAddress($shipFromAddress)
    {
        $this->container['shipFromAddress'] = $shipFromAddress;

        return $this;
    }

    /**
     * Gets labelPrepPreference
     *
     * @return \SellingPartnerApi\Model\FulfillmentInboundV0\LabelPrepPreference
     */
    public function getLabelPrepPreference()
    {
        return $this->container['labelPrepPreference'];
    }

    /**
     * Sets labelPrepPreference
     *
     * @param \SellingPartnerApi\Model\FulfillmentInboundV0\LabelPrepPreference $labelPrepPreference labelPrepPreference
     *
     * @return $this
     */
    public function setLabelPrepPreference($labelPrepPreference)
    {
        $this->container['labelPrepPreference'] = $labelPrepPreference;

        return $this;
    }

    /**
     * Gets shipToCountryCode
     *
     * @return string
     */
    public function getShipToCountryCode()
    {
        return $this->container['shipToCountryCode'];
    }

    /**
     * Sets shipToCountryCode
     *
     * @param string $shipToCountryCode The two-character country code for the country where the inbound shipment is to be sent.  Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.   Values:   ShipToCountryCode values for North America:  * CA – Canada  * MX - Mexico  * US - United States  ShipToCountryCode values for MCI sellers in Europe:  * DE – Germany  * ES – Spain  * FR – France  * GB – United Kingdom  * IT – Italy  Default: The country code for the seller's home marketplace.
     *
     * @return $this
     */
    public function setShipToCountryCode($shipToCountryCode)
    {
        $this->container['shipToCountryCode'] = $shipToCountryCode;

        return $this;
    }

    /**
     * Gets shipToCountrySubdivisionCode
     *
     * @return string
     */
    public function getShipToCountrySubdivisionCode()
    {
        return $this->container['shipToCountrySubdivisionCode'];
    }

    /**
     * Sets shipToCountrySubdivisionCode
     *
     * @param string $shipToCountrySubdivisionCode The two-character country code, followed by a dash and then up to three characters that represent the subdivision of the country where the inbound shipment is to be sent. For example, \"IN-MH\". In full ISO 3166-2 format.  Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
     *
     * @return $this
     */
    public function setShipToCountrySubdivisionCode($shipToCountrySubdivisionCode)
    {
        $this->container['shipToCountrySubdivisionCode'] = $shipToCountrySubdivisionCode;

        return $this;
    }

    /**
     * Gets inboundShipmentPlanRequestItems
     *
     * @return \SellingPartnerApi\Model\FulfillmentInboundV0\InboundShipmentPlanRequestItemList
     */
    public function getInboundShipmentPlanRequestItems()
    {
        return $this->container['inboundShipmentPlanRequestItems'];
    }

    /**
     * Sets inboundShipmentPlanRequestItems
     *
     * @param \SellingPartnerApi\Model\FulfillmentInboundV0\InboundShipmentPlanRequestItemList $inboundShipmentPlanRequestItems inboundShipmentPlanRequestItems
     *
     * @return $this
     */
    public function setInboundShipmentPlanRequestItems($inboundShipmentPlanRequestItems)
    {
        $this->container['inboundShipmentPlanRequestItems'] = $inboundShipmentPlanRequestItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
