<?php
/**
 * TrackingInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\Shipping;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * TrackingInformation Class Doc Comment
 *
 * @category Class
 * @description The payload schema for the getTrackingInformation operation.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrackingInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrackingInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trackingId' => '\SellingPartnerApi\Model\Shipping\TrackingId',
'summary' => '\SellingPartnerApi\Model\Shipping\TrackingSummary',
'promisedDeliveryDate' => '\SellingPartnerApi\Model\Shipping\PromisedDeliveryDate',
'eventHistory' => '\SellingPartnerApi\Model\Shipping\EventList'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trackingId' => null,
'summary' => null,
'promisedDeliveryDate' => null,
'eventHistory' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trackingId' => 'trackingId',
'summary' => 'summary',
'promisedDeliveryDate' => 'promisedDeliveryDate',
'eventHistory' => 'eventHistory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trackingId' => 'setTrackingId',
'summary' => 'setSummary',
'promisedDeliveryDate' => 'setPromisedDeliveryDate',
'eventHistory' => 'setEventHistory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trackingId' => 'getTrackingId',
'summary' => 'getSummary',
'promisedDeliveryDate' => 'getPromisedDeliveryDate',
'eventHistory' => 'getEventHistory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trackingId'] = isset($data['trackingId']) ? $data['trackingId'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['promisedDeliveryDate'] = isset($data['promisedDeliveryDate']) ? $data['promisedDeliveryDate'] : null;
        $this->container['eventHistory'] = isset($data['eventHistory']) ? $data['eventHistory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['trackingId'] === null) {
            $invalidProperties[] = "'trackingId' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['promisedDeliveryDate'] === null) {
            $invalidProperties[] = "'promisedDeliveryDate' can't be null";
        }
        if ($this->container['eventHistory'] === null) {
            $invalidProperties[] = "'eventHistory' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trackingId
     *
     * @return \SellingPartnerApi\Model\Shipping\TrackingId
     */
    public function getTrackingId()
    {
        return $this->container['trackingId'];
    }

    /**
     * Sets trackingId
     *
     * @param \SellingPartnerApi\Model\Shipping\TrackingId $trackingId trackingId
     *
     * @return $this
     */
    public function setTrackingId($trackingId)
    {
        $this->container['trackingId'] = $trackingId;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \SellingPartnerApi\Model\Shipping\TrackingSummary
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \SellingPartnerApi\Model\Shipping\TrackingSummary $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets promisedDeliveryDate
     *
     * @return \SellingPartnerApi\Model\Shipping\PromisedDeliveryDate
     */
    public function getPromisedDeliveryDate()
    {
        return $this->container['promisedDeliveryDate'];
    }

    /**
     * Sets promisedDeliveryDate
     *
     * @param \SellingPartnerApi\Model\Shipping\PromisedDeliveryDate $promisedDeliveryDate promisedDeliveryDate
     *
     * @return $this
     */
    public function setPromisedDeliveryDate($promisedDeliveryDate)
    {
        $this->container['promisedDeliveryDate'] = $promisedDeliveryDate;

        return $this;
    }

    /**
     * Gets eventHistory
     *
     * @return \SellingPartnerApi\Model\Shipping\EventList
     */
    public function getEventHistory()
    {
        return $this->container['eventHistory'];
    }

    /**
     * Sets eventHistory
     *
     * @param \SellingPartnerApi\Model\Shipping\EventList $eventHistory eventHistory
     *
     * @return $this
     */
    public function setEventHistory($eventHistory)
    {
        $this->container['eventHistory'] = $eventHistory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
