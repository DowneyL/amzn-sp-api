<?php
/**
 * ItemSummaryByMarketplace
 *
 * PHP version 5
 *
 * @category Class
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-12-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\CatalogItems20201201;

use \ArrayAccess;
use \SellingPartnerApi\ObjectSerializer;

/**
 * ItemSummaryByMarketplace Class Doc Comment
 *
 * @category Class
 * @description Summary details of an Amazon catalog item for the indicated Amazon marketplace.
 * @package  SellingPartnerApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemSummaryByMarketplace implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemSummaryByMarketplace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplaceId' => 'string',
'brandName' => 'string',
'browseNode' => 'string',
'colorName' => 'string',
'itemName' => 'string',
'manufacturer' => 'string',
'modelNumber' => 'string',
'sizeName' => 'string',
'styleName' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplaceId' => null,
'brandName' => null,
'browseNode' => null,
'colorName' => null,
'itemName' => null,
'manufacturer' => null,
'modelNumber' => null,
'sizeName' => null,
'styleName' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplaceId' => 'marketplaceId',
'brandName' => 'brandName',
'browseNode' => 'browseNode',
'colorName' => 'colorName',
'itemName' => 'itemName',
'manufacturer' => 'manufacturer',
'modelNumber' => 'modelNumber',
'sizeName' => 'sizeName',
'styleName' => 'styleName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplaceId' => 'setMarketplaceId',
'brandName' => 'setBrandName',
'browseNode' => 'setBrowseNode',
'colorName' => 'setColorName',
'itemName' => 'setItemName',
'manufacturer' => 'setManufacturer',
'modelNumber' => 'setModelNumber',
'sizeName' => 'setSizeName',
'styleName' => 'setStyleName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplaceId' => 'getMarketplaceId',
'brandName' => 'getBrandName',
'browseNode' => 'getBrowseNode',
'colorName' => 'getColorName',
'itemName' => 'getItemName',
'manufacturer' => 'getManufacturer',
'modelNumber' => 'getModelNumber',
'sizeName' => 'getSizeName',
'styleName' => 'getStyleName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['brandName'] = isset($data['brandName']) ? $data['brandName'] : null;
        $this->container['browseNode'] = isset($data['browseNode']) ? $data['browseNode'] : null;
        $this->container['colorName'] = isset($data['colorName']) ? $data['colorName'] : null;
        $this->container['itemName'] = isset($data['itemName']) ? $data['itemName'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['modelNumber'] = isset($data['modelNumber']) ? $data['modelNumber'] : null;
        $this->container['sizeName'] = isset($data['sizeName']) ? $data['sizeName'] : null;
        $this->container['styleName'] = isset($data['styleName']) ? $data['styleName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['marketplaceId'] === null) {
            $invalidProperties[] = "'marketplaceId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string $marketplaceId Amazon marketplace identifier.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets brandName
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brandName'];
    }

    /**
     * Sets brandName
     *
     * @param string $brandName Name of the brand associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setBrandName($brandName)
    {
        $this->container['brandName'] = $brandName;

        return $this;
    }

    /**
     * Gets browseNode
     *
     * @return string
     */
    public function getBrowseNode()
    {
        return $this->container['browseNode'];
    }

    /**
     * Sets browseNode
     *
     * @param string $browseNode Identifier of the browse node associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setBrowseNode($browseNode)
    {
        $this->container['browseNode'] = $browseNode;

        return $this;
    }

    /**
     * Gets colorName
     *
     * @return string
     */
    public function getColorName()
    {
        return $this->container['colorName'];
    }

    /**
     * Sets colorName
     *
     * @param string $colorName Name of the color associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setColorName($colorName)
    {
        $this->container['colorName'] = $colorName;

        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->container['itemName'];
    }

    /**
     * Sets itemName
     *
     * @param string $itemName Name, or title, associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setItemName($itemName)
    {
        $this->container['itemName'] = $itemName;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer Name of the manufacturer associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets modelNumber
     *
     * @return string
     */
    public function getModelNumber()
    {
        return $this->container['modelNumber'];
    }

    /**
     * Sets modelNumber
     *
     * @param string $modelNumber Model number associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setModelNumber($modelNumber)
    {
        $this->container['modelNumber'] = $modelNumber;

        return $this;
    }

    /**
     * Gets sizeName
     *
     * @return string
     */
    public function getSizeName()
    {
        return $this->container['sizeName'];
    }

    /**
     * Sets sizeName
     *
     * @param string $sizeName Name of the size associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setSizeName($sizeName)
    {
        $this->container['sizeName'] = $sizeName;

        return $this;
    }

    /**
     * Gets styleName
     *
     * @return string
     */
    public function getStyleName()
    {
        return $this->container['styleName'];
    }

    /**
     * Sets styleName
     *
     * @param string $styleName Name of the style associated with an Amazon catalog item.
     *
     * @return $this
     */
    public function setStyleName($styleName)
    {
        $this->container['styleName'] = $styleName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
